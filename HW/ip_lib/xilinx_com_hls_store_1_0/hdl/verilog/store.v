// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="store,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1796,HLS_SYN_LUT=2555}" *)

module store (
        ap_clk,
        ap_rst_n,
        m_axi_data_port_AWVALID,
        m_axi_data_port_AWREADY,
        m_axi_data_port_AWADDR,
        m_axi_data_port_AWID,
        m_axi_data_port_AWLEN,
        m_axi_data_port_AWSIZE,
        m_axi_data_port_AWBURST,
        m_axi_data_port_AWLOCK,
        m_axi_data_port_AWCACHE,
        m_axi_data_port_AWPROT,
        m_axi_data_port_AWQOS,
        m_axi_data_port_AWREGION,
        m_axi_data_port_AWUSER,
        m_axi_data_port_WVALID,
        m_axi_data_port_WREADY,
        m_axi_data_port_WDATA,
        m_axi_data_port_WSTRB,
        m_axi_data_port_WLAST,
        m_axi_data_port_WID,
        m_axi_data_port_WUSER,
        m_axi_data_port_ARVALID,
        m_axi_data_port_ARREADY,
        m_axi_data_port_ARADDR,
        m_axi_data_port_ARID,
        m_axi_data_port_ARLEN,
        m_axi_data_port_ARSIZE,
        m_axi_data_port_ARBURST,
        m_axi_data_port_ARLOCK,
        m_axi_data_port_ARCACHE,
        m_axi_data_port_ARPROT,
        m_axi_data_port_ARQOS,
        m_axi_data_port_ARREGION,
        m_axi_data_port_ARUSER,
        m_axi_data_port_RVALID,
        m_axi_data_port_RREADY,
        m_axi_data_port_RDATA,
        m_axi_data_port_RLAST,
        m_axi_data_port_RID,
        m_axi_data_port_RUSER,
        m_axi_data_port_RRESP,
        m_axi_data_port_BVALID,
        m_axi_data_port_BREADY,
        m_axi_data_port_BRESP,
        m_axi_data_port_BID,
        m_axi_data_port_BUSER,
        store_queue_V_V_TDATA,
        store_queue_V_V_TVALID,
        store_queue_V_V_TREADY,
        g2s_dep_queue_V_TDATA,
        g2s_dep_queue_V_TVALID,
        g2s_dep_queue_V_TREADY,
        s2g_dep_queue_V_TDATA,
        s2g_dep_queue_V_TVALID,
        s2g_dep_queue_V_TREADY,
        out_mem_V_Addr_A,
        out_mem_V_EN_A,
        out_mem_V_WEN_A,
        out_mem_V_Din_A,
        out_mem_V_Dout_A,
        out_mem_V_Clk_A,
        out_mem_V_Rst_A,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_pp0_stage0 = 12'd32;
parameter    ap_ST_fsm_state11 = 12'd64;
parameter    ap_ST_fsm_state12 = 12'd128;
parameter    ap_ST_fsm_state13 = 12'd256;
parameter    ap_ST_fsm_state14 = 12'd512;
parameter    ap_ST_fsm_state15 = 12'd1024;
parameter    ap_ST_fsm_state16 = 12'd2048;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_DATA_WIDTH = 64;
parameter    C_M_AXI_DATA_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_PORT_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_port_AWVALID;
input   m_axi_data_port_AWREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_AWADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_AWID;
output  [7:0] m_axi_data_port_AWLEN;
output  [2:0] m_axi_data_port_AWSIZE;
output  [1:0] m_axi_data_port_AWBURST;
output  [1:0] m_axi_data_port_AWLOCK;
output  [3:0] m_axi_data_port_AWCACHE;
output  [2:0] m_axi_data_port_AWPROT;
output  [3:0] m_axi_data_port_AWQOS;
output  [3:0] m_axi_data_port_AWREGION;
output  [C_M_AXI_DATA_PORT_AWUSER_WIDTH - 1:0] m_axi_data_port_AWUSER;
output   m_axi_data_port_WVALID;
input   m_axi_data_port_WREADY;
output  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_WDATA;
output  [C_M_AXI_DATA_PORT_WSTRB_WIDTH - 1:0] m_axi_data_port_WSTRB;
output   m_axi_data_port_WLAST;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_WID;
output  [C_M_AXI_DATA_PORT_WUSER_WIDTH - 1:0] m_axi_data_port_WUSER;
output   m_axi_data_port_ARVALID;
input   m_axi_data_port_ARREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_ARADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_ARID;
output  [7:0] m_axi_data_port_ARLEN;
output  [2:0] m_axi_data_port_ARSIZE;
output  [1:0] m_axi_data_port_ARBURST;
output  [1:0] m_axi_data_port_ARLOCK;
output  [3:0] m_axi_data_port_ARCACHE;
output  [2:0] m_axi_data_port_ARPROT;
output  [3:0] m_axi_data_port_ARQOS;
output  [3:0] m_axi_data_port_ARREGION;
output  [C_M_AXI_DATA_PORT_ARUSER_WIDTH - 1:0] m_axi_data_port_ARUSER;
input   m_axi_data_port_RVALID;
output   m_axi_data_port_RREADY;
input  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_RDATA;
input   m_axi_data_port_RLAST;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_RID;
input  [C_M_AXI_DATA_PORT_RUSER_WIDTH - 1:0] m_axi_data_port_RUSER;
input  [1:0] m_axi_data_port_RRESP;
input   m_axi_data_port_BVALID;
output   m_axi_data_port_BREADY;
input  [1:0] m_axi_data_port_BRESP;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_BID;
input  [C_M_AXI_DATA_PORT_BUSER_WIDTH - 1:0] m_axi_data_port_BUSER;
input  [127:0] store_queue_V_V_TDATA;
input   store_queue_V_V_TVALID;
output   store_queue_V_V_TREADY;
input  [7:0] g2s_dep_queue_V_TDATA;
input   g2s_dep_queue_V_TVALID;
output   g2s_dep_queue_V_TREADY;
output  [7:0] s2g_dep_queue_V_TDATA;
output   s2g_dep_queue_V_TVALID;
input   s2g_dep_queue_V_TREADY;
output  [31:0] out_mem_V_Addr_A;
output   out_mem_V_EN_A;
output  [15:0] out_mem_V_WEN_A;
output  [127:0] out_mem_V_Din_A;
input  [127:0] out_mem_V_Dout_A;
output   out_mem_V_Clk_A;
output   out_mem_V_Rst_A;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg out_mem_V_EN_A;
reg out_mem_V_Rst_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] outputs_V;
reg   [127:0] store_queue_V_V_0_data_out;
wire    store_queue_V_V_0_vld_in;
wire    store_queue_V_V_0_vld_out;
wire    store_queue_V_V_0_ack_in;
reg    store_queue_V_V_0_ack_out;
reg   [127:0] store_queue_V_V_0_payload_A;
reg   [127:0] store_queue_V_V_0_payload_B;
reg    store_queue_V_V_0_sel_rd;
reg    store_queue_V_V_0_sel_wr;
wire    store_queue_V_V_0_sel;
wire    store_queue_V_V_0_load_A;
wire    store_queue_V_V_0_load_B;
reg   [1:0] store_queue_V_V_0_state;
wire    store_queue_V_V_0_state_cmp_full;
wire    g2s_dep_queue_V_0_vld_in;
wire    g2s_dep_queue_V_0_vld_out;
reg    g2s_dep_queue_V_0_ack_out;
reg   [1:0] g2s_dep_queue_V_0_state;
wire   [7:0] s2g_dep_queue_V_1_data_out;
reg    s2g_dep_queue_V_1_vld_in;
wire    s2g_dep_queue_V_1_vld_out;
wire    s2g_dep_queue_V_1_ack_in;
wire    s2g_dep_queue_V_1_ack_out;
reg    s2g_dep_queue_V_1_sel_rd;
wire    s2g_dep_queue_V_1_sel;
reg   [1:0] s2g_dep_queue_V_1_state;
reg    data_port_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    data_port_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_reg_650;
reg   [0:0] exitcond2_reg_650_pp0_iter3_reg;
reg    data_port_blk_n_B;
wire    ap_CS_fsm_state15;
reg    store_queue_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    g2s_dep_queue_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_1_reg_583;
reg    s2g_dep_queue_V_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_347_p2;
wire   [0:0] tmp_4_fu_375_p3;
wire    ap_CS_fsm_state16;
reg   [0:0] tmp_4_reg_635;
reg    data_port_AWVALID;
wire    data_port_AWREADY;
wire   [31:0] data_port_AWADDR;
reg    data_port_WVALID;
wire    data_port_WREADY;
wire    data_port_ARREADY;
wire    data_port_RVALID;
wire   [63:0] data_port_RDATA;
wire    data_port_RLAST;
wire   [0:0] data_port_RID;
wire   [0:0] data_port_RUSER;
wire   [1:0] data_port_RRESP;
wire    data_port_BVALID;
reg    data_port_BREADY;
wire   [1:0] data_port_BRESP;
wire   [0:0] data_port_BID;
wire   [0:0] data_port_BUSER;
reg   [16:0] indvar_reg_254;
reg   [28:0] tmp_reg_559;
wire   [33:0] tmp_cast_fu_275_p1;
reg   [33:0] tmp_cast_reg_564;
reg   [127:0] tmp_V_reg_569;
reg   [15:0] tmp_s_reg_578;
reg    ap_block_state3;
reg   [15:0] tmp_2_reg_597;
wire   [15:0] tmp_3_fu_323_p4;
reg   [15:0] tmp_3_reg_602;
wire   [31:0] op2_assign_cast_fu_332_p1;
reg   [31:0] op2_assign_cast_reg_607;
wire   [16:0] tmp_65_i32_shr_fu_335_p3;
reg   [16:0] tmp_65_i32_shr_reg_612;
wire   [31:0] tmp_65_i32_shr_cast_fu_343_p1;
reg   [31:0] tmp_65_i32_shr_cast_reg_617;
wire   [15:0] y_1_fu_352_p2;
reg   [15:0] y_1_reg_625;
reg    ap_predicate_op62_write_state4;
reg    ap_block_state4_io;
wire   [33:0] outputs_V2_sum_fu_370_p2;
reg   [33:0] outputs_V2_sum_reg_630;
reg    ap_sig_ioackin_data_port_AWREADY;
wire   [13:0] tmp_8_fu_396_p3;
reg   [13:0] tmp_8_reg_645;
wire   [0:0] exitcond2_fu_404_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
reg    ap_sig_ioackin_data_port_WREADY;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_reg_650_pp0_iter1_reg;
reg   [0:0] exitcond2_reg_650_pp0_iter2_reg;
wire   [16:0] indvar_next_fu_409_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_13_fu_439_p1;
reg   [0:0] tmp_13_reg_664;
reg   [127:0] out_mem_V_load_reg_669;
wire   [6:0] tmp_14_fu_443_p3;
reg   [6:0] tmp_14_reg_675;
wire   [6:0] tmp_15_fu_450_p2;
reg   [6:0] tmp_15_reg_680;
wire   [0:0] tmp_16_fu_456_p2;
reg   [0:0] tmp_16_reg_685;
wire   [7:0] tmp_26_fu_515_p2;
reg   [7:0] tmp_26_reg_692;
wire   [127:0] tmp_29_fu_525_p2;
reg   [127:0] tmp_29_reg_697;
wire   [63:0] tmp_32_fu_545_p1;
reg   [63:0] tmp_32_reg_702;
wire   [15:0] sram_idx_V_1_fu_549_p2;
reg   [15:0] sram_idx_V_1_reg_707;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_7_fu_554_p2;
reg   [31:0] tmp_7_reg_712;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [15:0] sram_idx_V1_reg_223;
reg   [31:0] dram_idx_V_reg_233;
reg   [15:0] y_reg_243;
wire   [63:0] tmp_79_cast_fu_434_p1;
wire   [63:0] outputs_V2_sum_cast_fu_382_p1;
reg    ap_reg_ioackin_data_port_AWREADY;
reg    ap_reg_ioackin_data_port_WREADY;
wire    ap_block_pp0_stage0_01001;
reg    ap_block_state16_io;
wire   [31:0] out_mem_V_Addr_A_orig;
wire   [32:0] r_V_fu_358_p3;
wire   [33:0] r_V_cast_cast_fu_366_p1;
wire   [12:0] tmp_5_fu_392_p1;
wire   [13:0] tmp_10_fu_415_p1;
wire   [13:0] tmp_11_fu_419_p2;
wire   [12:0] tmp_12_fu_424_p4;
wire   [7:0] tmp_17_fu_462_p1;
wire   [7:0] tmp_18_fu_465_p1;
wire   [7:0] tmp_20_fu_477_p2;
wire   [7:0] tmp_22_fu_489_p2;
reg   [127:0] tmp_19_fu_468_p4;
wire   [7:0] tmp_21_fu_483_p2;
wire   [7:0] tmp_23_fu_495_p3;
wire   [7:0] tmp_25_fu_508_p3;
wire   [127:0] tmp_24_fu_502_p3;
wire   [127:0] tmp_27_fu_521_p1;
wire   [127:0] tmp_28_fu_531_p1;
wire   [127:0] tmp_30_fu_534_p2;
wire   [127:0] tmp_31_fu_540_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 store_queue_V_V_0_sel_rd = 1'b0;
#0 store_queue_V_V_0_sel_wr = 1'b0;
#0 store_queue_V_V_0_state = 2'd0;
#0 g2s_dep_queue_V_0_state = 2'd0;
#0 s2g_dep_queue_V_1_sel_rd = 1'b0;
#0 s2g_dep_queue_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_data_port_AWREADY = 1'b0;
#0 ap_reg_ioackin_data_port_WREADY = 1'b0;
end

store_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
store_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .outputs_V(outputs_V)
);

store_data_port_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_PORT_CACHE_VALUE ))
store_data_port_m_axi_U(
    .AWVALID(m_axi_data_port_AWVALID),
    .AWREADY(m_axi_data_port_AWREADY),
    .AWADDR(m_axi_data_port_AWADDR),
    .AWID(m_axi_data_port_AWID),
    .AWLEN(m_axi_data_port_AWLEN),
    .AWSIZE(m_axi_data_port_AWSIZE),
    .AWBURST(m_axi_data_port_AWBURST),
    .AWLOCK(m_axi_data_port_AWLOCK),
    .AWCACHE(m_axi_data_port_AWCACHE),
    .AWPROT(m_axi_data_port_AWPROT),
    .AWQOS(m_axi_data_port_AWQOS),
    .AWREGION(m_axi_data_port_AWREGION),
    .AWUSER(m_axi_data_port_AWUSER),
    .WVALID(m_axi_data_port_WVALID),
    .WREADY(m_axi_data_port_WREADY),
    .WDATA(m_axi_data_port_WDATA),
    .WSTRB(m_axi_data_port_WSTRB),
    .WLAST(m_axi_data_port_WLAST),
    .WID(m_axi_data_port_WID),
    .WUSER(m_axi_data_port_WUSER),
    .ARVALID(m_axi_data_port_ARVALID),
    .ARREADY(m_axi_data_port_ARREADY),
    .ARADDR(m_axi_data_port_ARADDR),
    .ARID(m_axi_data_port_ARID),
    .ARLEN(m_axi_data_port_ARLEN),
    .ARSIZE(m_axi_data_port_ARSIZE),
    .ARBURST(m_axi_data_port_ARBURST),
    .ARLOCK(m_axi_data_port_ARLOCK),
    .ARCACHE(m_axi_data_port_ARCACHE),
    .ARPROT(m_axi_data_port_ARPROT),
    .ARQOS(m_axi_data_port_ARQOS),
    .ARREGION(m_axi_data_port_ARREGION),
    .ARUSER(m_axi_data_port_ARUSER),
    .RVALID(m_axi_data_port_RVALID),
    .RREADY(m_axi_data_port_RREADY),
    .RDATA(m_axi_data_port_RDATA),
    .RLAST(m_axi_data_port_RLAST),
    .RID(m_axi_data_port_RID),
    .RUSER(m_axi_data_port_RUSER),
    .RRESP(m_axi_data_port_RRESP),
    .BVALID(m_axi_data_port_BVALID),
    .BREADY(m_axi_data_port_BREADY),
    .BRESP(m_axi_data_port_BRESP),
    .BID(m_axi_data_port_BID),
    .BUSER(m_axi_data_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(data_port_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_port_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(data_port_RDATA),
    .I_RID(data_port_RID),
    .I_RUSER(data_port_RUSER),
    .I_RRESP(data_port_RRESP),
    .I_RLAST(data_port_RLAST),
    .I_AWVALID(data_port_AWVALID),
    .I_AWREADY(data_port_AWREADY),
    .I_AWADDR(data_port_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(tmp_65_i32_shr_cast_reg_617),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_port_WVALID),
    .I_WREADY(data_port_WREADY),
    .I_WDATA(tmp_32_reg_702),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(data_port_BVALID),
    .I_BREADY(data_port_BREADY),
    .I_BRESP(data_port_BRESP),
    .I_BID(data_port_BID),
    .I_BUSER(data_port_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_sig_ioackin_data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_data_port_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_data_port_AWREADY == 1'b1)) begin
                ap_reg_ioackin_data_port_AWREADY <= 1'b0;
            end else if ((data_port_AWREADY == 1'b1)) begin
                ap_reg_ioackin_data_port_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_data_port_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond2_reg_650_pp0_iter3_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_data_port_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (data_port_WREADY == 1'b1))) begin
                ap_reg_ioackin_data_port_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        g2s_dep_queue_V_0_state <= 2'd0;
    end else begin
        if ((((g2s_dep_queue_V_0_vld_in == 1'b0) & (g2s_dep_queue_V_0_state == 2'd2)) | ((g2s_dep_queue_V_0_vld_in == 1'b0) & (g2s_dep_queue_V_0_ack_out == 1'b1) & (g2s_dep_queue_V_0_state == 2'd3)))) begin
            g2s_dep_queue_V_0_state <= 2'd2;
        end else if ((((g2s_dep_queue_V_0_ack_out == 1'b0) & (g2s_dep_queue_V_0_state == 2'd1)) | ((g2s_dep_queue_V_0_ack_out == 1'b0) & (g2s_dep_queue_V_0_vld_in == 1'b1) & (g2s_dep_queue_V_0_state == 2'd3)))) begin
            g2s_dep_queue_V_0_state <= 2'd1;
        end else if (((~((g2s_dep_queue_V_0_vld_in == 1'b0) & (g2s_dep_queue_V_0_ack_out == 1'b1)) & ~((g2s_dep_queue_V_0_ack_out == 1'b0) & (g2s_dep_queue_V_0_vld_in == 1'b1)) & (g2s_dep_queue_V_0_state == 2'd3)) | ((g2s_dep_queue_V_0_ack_out == 1'b1) & (g2s_dep_queue_V_0_state == 2'd1)) | ((g2s_dep_queue_V_0_vld_in == 1'b1) & (g2s_dep_queue_V_0_state == 2'd2)))) begin
            g2s_dep_queue_V_0_state <= 2'd3;
        end else begin
            g2s_dep_queue_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s2g_dep_queue_V_1_sel_rd <= 1'b0;
    end else begin
        if (((s2g_dep_queue_V_1_ack_out == 1'b1) & (s2g_dep_queue_V_1_vld_out == 1'b1))) begin
            s2g_dep_queue_V_1_sel_rd <= ~s2g_dep_queue_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s2g_dep_queue_V_1_state <= 2'd0;
    end else begin
        if ((((s2g_dep_queue_V_1_vld_in == 1'b0) & (s2g_dep_queue_V_1_state == 2'd2)) | ((s2g_dep_queue_V_1_vld_in == 1'b0) & (s2g_dep_queue_V_1_ack_out == 1'b1) & (s2g_dep_queue_V_1_state == 2'd3)))) begin
            s2g_dep_queue_V_1_state <= 2'd2;
        end else if ((((s2g_dep_queue_V_1_ack_out == 1'b0) & (s2g_dep_queue_V_1_state == 2'd1)) | ((s2g_dep_queue_V_1_ack_out == 1'b0) & (s2g_dep_queue_V_1_vld_in == 1'b1) & (s2g_dep_queue_V_1_state == 2'd3)))) begin
            s2g_dep_queue_V_1_state <= 2'd1;
        end else if (((~((s2g_dep_queue_V_1_vld_in == 1'b0) & (s2g_dep_queue_V_1_ack_out == 1'b1)) & ~((s2g_dep_queue_V_1_ack_out == 1'b0) & (s2g_dep_queue_V_1_vld_in == 1'b1)) & (s2g_dep_queue_V_1_state == 2'd3)) | ((s2g_dep_queue_V_1_ack_out == 1'b1) & (s2g_dep_queue_V_1_state == 2'd1)) | ((s2g_dep_queue_V_1_vld_in == 1'b1) & (s2g_dep_queue_V_1_state == 2'd2)))) begin
            s2g_dep_queue_V_1_state <= 2'd3;
        end else begin
            s2g_dep_queue_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        store_queue_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((store_queue_V_V_0_ack_out == 1'b1) & (store_queue_V_V_0_vld_out == 1'b1))) begin
            store_queue_V_V_0_sel_rd <= ~store_queue_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        store_queue_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((store_queue_V_V_0_ack_in == 1'b1) & (store_queue_V_V_0_vld_in == 1'b1))) begin
            store_queue_V_V_0_sel_wr <= ~store_queue_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        store_queue_V_V_0_state <= 2'd0;
    end else begin
        if ((((store_queue_V_V_0_vld_in == 1'b0) & (store_queue_V_V_0_state == 2'd2)) | ((store_queue_V_V_0_vld_in == 1'b0) & (store_queue_V_V_0_ack_out == 1'b1) & (store_queue_V_V_0_state == 2'd3)))) begin
            store_queue_V_V_0_state <= 2'd2;
        end else if ((((store_queue_V_V_0_ack_out == 1'b0) & (store_queue_V_V_0_state == 2'd1)) | ((store_queue_V_V_0_ack_out == 1'b0) & (store_queue_V_V_0_vld_in == 1'b1) & (store_queue_V_V_0_state == 2'd3)))) begin
            store_queue_V_V_0_state <= 2'd1;
        end else if (((~((store_queue_V_V_0_vld_in == 1'b0) & (store_queue_V_V_0_ack_out == 1'b1)) & ~((store_queue_V_V_0_ack_out == 1'b0) & (store_queue_V_V_0_vld_in == 1'b1)) & (store_queue_V_V_0_state == 2'd3)) | ((store_queue_V_V_0_ack_out == 1'b1) & (store_queue_V_V_0_state == 2'd1)) | ((store_queue_V_V_0_vld_in == 1'b1) & (store_queue_V_V_0_state == 2'd2)))) begin
            store_queue_V_V_0_state <= 2'd3;
        end else begin
            store_queue_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        dram_idx_V_reg_233 <= tmp_7_reg_712;
    end else if ((~((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
        dram_idx_V_reg_233 <= {{tmp_V_reg_569[56:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_404_p2 == 1'd0))) begin
        indvar_reg_254 <= indvar_next_fu_409_p2;
    end else if (((ap_sig_ioackin_data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvar_reg_254 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        sram_idx_V1_reg_223 <= sram_idx_V_1_reg_707;
    end else if ((~((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
        sram_idx_V1_reg_223 <= {{tmp_V_reg_569[24:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        y_reg_243 <= y_1_reg_625;
    end else if ((~((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
        y_reg_243 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_650 <= exitcond2_fu_404_p2;
        exitcond2_reg_650_pp0_iter1_reg <= exitcond2_reg_650;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond2_reg_650_pp0_iter2_reg <= exitcond2_reg_650_pp0_iter1_reg;
        exitcond2_reg_650_pp0_iter3_reg <= exitcond2_reg_650_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
        op2_assign_cast_reg_607[15 : 0] <= op2_assign_cast_fu_332_p1[15 : 0];
        tmp_2_reg_597 <= {{tmp_V_reg_569[79:64]}};
        tmp_3_reg_602 <= {{tmp_V_reg_569[95:80]}};
        tmp_65_i32_shr_cast_reg_617[16 : 1] <= tmp_65_i32_shr_cast_fu_343_p1[16 : 1];
        tmp_65_i32_shr_reg_612[16 : 1] <= tmp_65_i32_shr_fu_335_p3[16 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_650 == 1'd0))) begin
        out_mem_V_load_reg_669 <= out_mem_V_Dout_A;
        tmp_14_reg_675[6] <= tmp_14_fu_443_p3[6];
        tmp_15_reg_680[6] <= tmp_15_fu_450_p2[6];
        tmp_16_reg_685 <= tmp_16_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4) & (exitcond_fu_347_p2 == 1'd0))) begin
        outputs_V2_sum_reg_630 <= outputs_V2_sum_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sram_idx_V_1_reg_707 <= sram_idx_V_1_fu_549_p2;
        tmp_7_reg_712 <= tmp_7_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((store_queue_V_V_0_load_A == 1'b1)) begin
        store_queue_V_V_0_payload_A <= store_queue_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((store_queue_V_V_0_load_B == 1'b1)) begin
        store_queue_V_V_0_payload_B <= store_queue_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_404_p2 == 1'd0))) begin
        tmp_13_reg_664 <= tmp_13_fu_439_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((store_queue_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_583 <= store_queue_V_V_0_data_out[32'd3];
        tmp_V_reg_569 <= store_queue_V_V_0_data_out;
        tmp_cast_reg_564[28 : 0] <= tmp_cast_fu_275_p1[28 : 0];
        tmp_s_reg_578 <= {{store_queue_V_V_0_data_out[111:96]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_650_pp0_iter1_reg == 1'd0))) begin
        tmp_26_reg_692[7 : 1] <= tmp_26_fu_515_p2[7 : 1];
        tmp_29_reg_697 <= tmp_29_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_650_pp0_iter2_reg == 1'd0))) begin
        tmp_32_reg_702 <= tmp_32_fu_545_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4) & (exitcond_fu_347_p2 == 1'd1))) begin
        tmp_4_reg_635 <= tmp_V_reg_569[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_8_reg_645[13 : 1] <= tmp_8_fu_396_p3[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_559 <= {{outputs_V[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
        y_1_reg_625 <= y_1_fu_352_p2;
    end
end

always @ (*) begin
    if ((exitcond2_fu_404_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((s2g_dep_queue_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state16_io)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((s2g_dep_queue_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state16_io)) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_port_AWREADY == 1'b0)) begin
        ap_sig_ioackin_data_port_AWREADY = data_port_AWREADY;
    end else begin
        ap_sig_ioackin_data_port_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_port_WREADY == 1'b0)) begin
        ap_sig_ioackin_data_port_WREADY = data_port_WREADY;
    end else begin
        ap_sig_ioackin_data_port_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_data_port_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        data_port_AWVALID = 1'b1;
    end else begin
        data_port_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        data_port_BREADY = 1'b1;
    end else begin
        data_port_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_data_port_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond2_reg_650_pp0_iter3_reg == 1'd0))) begin
        data_port_WVALID = 1'b1;
    end else begin
        data_port_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_port_blk_n_AW = m_axi_data_port_AWREADY;
    end else begin
        data_port_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        data_port_blk_n_B = m_axi_data_port_BVALID;
    end else begin
        data_port_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond2_reg_650_pp0_iter3_reg == 1'd0))) begin
        data_port_blk_n_W = m_axi_data_port_WREADY;
    end else begin
        data_port_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1)) & (1'b1 == ap_CS_fsm_state3) & (tmp_1_reg_583 == 1'd1))) begin
        g2s_dep_queue_V_0_ack_out = 1'b1;
    end else begin
        g2s_dep_queue_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_reg_583 == 1'd1))) begin
        g2s_dep_queue_V_TDATA_blk_n = g2s_dep_queue_V_0_state[1'd0];
    end else begin
        g2s_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_mem_V_EN_A = 1'b1;
    end else begin
        out_mem_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_io) & (ap_predicate_op62_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        s2g_dep_queue_V_1_vld_in = 1'b1;
    end else begin
        s2g_dep_queue_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (tmp_4_reg_635 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_4_fu_375_p3 == 1'd1) & (exitcond_fu_347_p2 == 1'd1)))) begin
        s2g_dep_queue_V_TDATA_blk_n = s2g_dep_queue_V_1_state[1'd1];
    end else begin
        s2g_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((store_queue_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        store_queue_V_V_0_ack_out = 1'b1;
    end else begin
        store_queue_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((store_queue_V_V_0_sel == 1'b1)) begin
        store_queue_V_V_0_data_out = store_queue_V_V_0_payload_B;
    end else begin
        store_queue_V_V_0_data_out = store_queue_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        store_queue_V_V_TDATA_blk_n = store_queue_V_V_0_state[1'd0];
    end else begin
        store_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((store_queue_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4) & (exitcond_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4) & (exitcond_fu_347_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_404_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond2_fu_404_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((s2g_dep_queue_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state16_io)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((ap_sig_ioackin_data_port_WREADY == 1'b0) & (exitcond2_reg_650_pp0_iter3_reg == 1'd0));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((s2g_dep_queue_V_1_ack_in == 1'b0) & (tmp_4_reg_635 == 1'd1));
end

always @ (*) begin
    ap_block_state3 = ((g2s_dep_queue_V_0_vld_out == 1'b0) & (tmp_1_reg_583 == 1'd1));
end

always @ (*) begin
    ap_block_state4_io = ((s2g_dep_queue_V_1_ack_in == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op62_write_state4 = ((tmp_4_fu_375_p3 == 1'd1) & (exitcond_fu_347_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_port_AWADDR = outputs_V2_sum_cast_fu_382_p1;

assign exitcond2_fu_404_p2 = ((indvar_reg_254 == tmp_65_i32_shr_reg_612) ? 1'b1 : 1'b0);

assign exitcond_fu_347_p2 = ((y_reg_243 == tmp_2_reg_597) ? 1'b1 : 1'b0);

assign g2s_dep_queue_V_0_vld_in = g2s_dep_queue_V_TVALID;

assign g2s_dep_queue_V_0_vld_out = g2s_dep_queue_V_0_state[1'd0];

assign g2s_dep_queue_V_TREADY = g2s_dep_queue_V_0_state[1'd1];

assign indvar_next_fu_409_p2 = (indvar_reg_254 + 17'd1);

assign op2_assign_cast_fu_332_p1 = tmp_s_reg_578;

assign out_mem_V_Addr_A = out_mem_V_Addr_A_orig << 32'd4;

assign out_mem_V_Addr_A_orig = tmp_79_cast_fu_434_p1;

assign out_mem_V_Clk_A = ap_clk;

assign out_mem_V_Din_A = 128'd0;

always @ (*) begin
    out_mem_V_Rst_A = ~ap_rst_n;
end

assign out_mem_V_WEN_A = 16'd0;

assign outputs_V2_sum_cast_fu_382_p1 = outputs_V2_sum_reg_630;

assign outputs_V2_sum_fu_370_p2 = (tmp_cast_reg_564 + r_V_cast_cast_fu_366_p1);

assign r_V_cast_cast_fu_366_p1 = r_V_fu_358_p3;

assign r_V_fu_358_p3 = {{dram_idx_V_reg_233}, {1'd0}};

assign s2g_dep_queue_V_1_ack_in = s2g_dep_queue_V_1_state[1'd1];

assign s2g_dep_queue_V_1_ack_out = s2g_dep_queue_V_TREADY;

assign s2g_dep_queue_V_1_data_out = 8'd1;

assign s2g_dep_queue_V_1_sel = s2g_dep_queue_V_1_sel_rd;

assign s2g_dep_queue_V_1_vld_out = s2g_dep_queue_V_1_state[1'd0];

assign s2g_dep_queue_V_TDATA = s2g_dep_queue_V_1_data_out;

assign s2g_dep_queue_V_TVALID = s2g_dep_queue_V_1_state[1'd0];

assign sram_idx_V_1_fu_549_p2 = (tmp_3_reg_602 + sram_idx_V1_reg_223);

assign store_queue_V_V_0_ack_in = store_queue_V_V_0_state[1'd1];

assign store_queue_V_V_0_load_A = (store_queue_V_V_0_state_cmp_full & ~store_queue_V_V_0_sel_wr);

assign store_queue_V_V_0_load_B = (store_queue_V_V_0_state_cmp_full & store_queue_V_V_0_sel_wr);

assign store_queue_V_V_0_sel = store_queue_V_V_0_sel_rd;

assign store_queue_V_V_0_state_cmp_full = ((store_queue_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign store_queue_V_V_0_vld_in = store_queue_V_V_TVALID;

assign store_queue_V_V_0_vld_out = store_queue_V_V_0_state[1'd0];

assign store_queue_V_V_TREADY = store_queue_V_V_0_state[1'd1];

assign tmp_10_fu_415_p1 = indvar_reg_254[13:0];

assign tmp_11_fu_419_p2 = (tmp_8_reg_645 + tmp_10_fu_415_p1);

assign tmp_12_fu_424_p4 = {{tmp_11_fu_419_p2[13:1]}};

assign tmp_13_fu_439_p1 = indvar_reg_254[0:0];

assign tmp_14_fu_443_p3 = {{tmp_13_reg_664}, {6'd0}};

assign tmp_15_fu_450_p2 = (tmp_14_fu_443_p3 | 7'd63);

assign tmp_16_fu_456_p2 = ((tmp_14_fu_443_p3 > tmp_15_fu_450_p2) ? 1'b1 : 1'b0);

assign tmp_17_fu_462_p1 = tmp_14_reg_675;

assign tmp_18_fu_465_p1 = tmp_15_reg_680;

integer ap_tvar_int_0;

always @ (out_mem_V_load_reg_669) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_19_fu_468_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_19_fu_468_p4[ap_tvar_int_0] = out_mem_V_load_reg_669[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_20_fu_477_p2 = (tmp_17_fu_462_p1 - tmp_18_fu_465_p1);

assign tmp_21_fu_483_p2 = (tmp_17_fu_462_p1 ^ 8'd127);

assign tmp_22_fu_489_p2 = (tmp_18_fu_465_p1 - tmp_17_fu_462_p1);

assign tmp_23_fu_495_p3 = ((tmp_16_reg_685[0:0] === 1'b1) ? tmp_20_fu_477_p2 : tmp_22_fu_489_p2);

assign tmp_24_fu_502_p3 = ((tmp_16_reg_685[0:0] === 1'b1) ? tmp_19_fu_468_p4 : out_mem_V_load_reg_669);

assign tmp_25_fu_508_p3 = ((tmp_16_reg_685[0:0] === 1'b1) ? tmp_21_fu_483_p2 : tmp_17_fu_462_p1);

assign tmp_26_fu_515_p2 = (8'd127 - tmp_23_fu_495_p3);

assign tmp_27_fu_521_p1 = tmp_25_fu_508_p3;

assign tmp_28_fu_531_p1 = tmp_26_reg_692;

assign tmp_29_fu_525_p2 = tmp_24_fu_502_p3 >> tmp_27_fu_521_p1;

assign tmp_30_fu_534_p2 = 128'd340282366920938463463374607431768211455 >> tmp_28_fu_531_p1;

assign tmp_31_fu_540_p2 = (tmp_30_fu_534_p2 & tmp_29_reg_697);

assign tmp_32_fu_545_p1 = tmp_31_fu_540_p2[63:0];

assign tmp_3_fu_323_p4 = {{tmp_V_reg_569[95:80]}};

assign tmp_4_fu_375_p3 = tmp_V_reg_569[32'd5];

assign tmp_5_fu_392_p1 = sram_idx_V1_reg_223[12:0];

assign tmp_65_i32_shr_cast_fu_343_p1 = tmp_65_i32_shr_fu_335_p3;

assign tmp_65_i32_shr_fu_335_p3 = {{tmp_3_fu_323_p4}, {1'd0}};

assign tmp_79_cast_fu_434_p1 = tmp_12_fu_424_p4;

assign tmp_7_fu_554_p2 = (dram_idx_V_reg_233 + op2_assign_cast_reg_607);

assign tmp_8_fu_396_p3 = {{tmp_5_fu_392_p1}, {1'd0}};

assign tmp_cast_fu_275_p1 = tmp_reg_559;

assign y_1_fu_352_p2 = (y_reg_243 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_564[33:29] <= 5'b00000;
    op2_assign_cast_reg_607[31:16] <= 16'b0000000000000000;
    tmp_65_i32_shr_reg_612[0] <= 1'b0;
    tmp_65_i32_shr_cast_reg_617[0] <= 1'b0;
    tmp_65_i32_shr_cast_reg_617[31:17] <= 15'b000000000000000;
    tmp_8_reg_645[0] <= 1'b0;
    tmp_14_reg_675[5:0] <= 6'b000000;
    tmp_15_reg_680[5:0] <= 6'b111111;
    tmp_26_reg_692[0] <= 1'b0;
end

endmodule //store
