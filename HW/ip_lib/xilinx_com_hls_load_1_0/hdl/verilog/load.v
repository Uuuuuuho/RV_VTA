// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="load,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.275000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=5439,HLS_SYN_LUT=18518}" *)

module load (
        ap_clk,
        ap_rst_n,
        m_axi_data_port_AWVALID,
        m_axi_data_port_AWREADY,
        m_axi_data_port_AWADDR,
        m_axi_data_port_AWID,
        m_axi_data_port_AWLEN,
        m_axi_data_port_AWSIZE,
        m_axi_data_port_AWBURST,
        m_axi_data_port_AWLOCK,
        m_axi_data_port_AWCACHE,
        m_axi_data_port_AWPROT,
        m_axi_data_port_AWQOS,
        m_axi_data_port_AWREGION,
        m_axi_data_port_AWUSER,
        m_axi_data_port_WVALID,
        m_axi_data_port_WREADY,
        m_axi_data_port_WDATA,
        m_axi_data_port_WSTRB,
        m_axi_data_port_WLAST,
        m_axi_data_port_WID,
        m_axi_data_port_WUSER,
        m_axi_data_port_ARVALID,
        m_axi_data_port_ARREADY,
        m_axi_data_port_ARADDR,
        m_axi_data_port_ARID,
        m_axi_data_port_ARLEN,
        m_axi_data_port_ARSIZE,
        m_axi_data_port_ARBURST,
        m_axi_data_port_ARLOCK,
        m_axi_data_port_ARCACHE,
        m_axi_data_port_ARPROT,
        m_axi_data_port_ARQOS,
        m_axi_data_port_ARREGION,
        m_axi_data_port_ARUSER,
        m_axi_data_port_RVALID,
        m_axi_data_port_RREADY,
        m_axi_data_port_RDATA,
        m_axi_data_port_RLAST,
        m_axi_data_port_RID,
        m_axi_data_port_RUSER,
        m_axi_data_port_RRESP,
        m_axi_data_port_BVALID,
        m_axi_data_port_BREADY,
        m_axi_data_port_BRESP,
        m_axi_data_port_BID,
        m_axi_data_port_BUSER,
        load_queue_V_V_TDATA,
        load_queue_V_V_TVALID,
        load_queue_V_V_TREADY,
        g2l_dep_queue_V_TDATA,
        g2l_dep_queue_V_TVALID,
        g2l_dep_queue_V_TREADY,
        l2g_dep_queue_V_TDATA,
        l2g_dep_queue_V_TVALID,
        l2g_dep_queue_V_TREADY,
        inp_mem_V_Addr_A,
        inp_mem_V_EN_A,
        inp_mem_V_WEN_A,
        inp_mem_V_Din_A,
        inp_mem_V_Dout_A,
        inp_mem_V_Clk_A,
        inp_mem_V_Rst_A,
        wgt_mem_0_V_Addr_A,
        wgt_mem_0_V_EN_A,
        wgt_mem_0_V_WEN_A,
        wgt_mem_0_V_Din_A,
        wgt_mem_0_V_Dout_A,
        wgt_mem_0_V_Clk_A,
        wgt_mem_0_V_Rst_A,
        wgt_mem_1_V_Addr_A,
        wgt_mem_1_V_EN_A,
        wgt_mem_1_V_WEN_A,
        wgt_mem_1_V_Din_A,
        wgt_mem_1_V_Dout_A,
        wgt_mem_1_V_Clk_A,
        wgt_mem_1_V_Rst_A,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 31'd4096;
parameter    ap_ST_fsm_pp0_stage1 = 31'd8192;
parameter    ap_ST_fsm_state18 = 31'd16384;
parameter    ap_ST_fsm_state19 = 31'd32768;
parameter    ap_ST_fsm_state20 = 31'd65536;
parameter    ap_ST_fsm_state21 = 31'd131072;
parameter    ap_ST_fsm_state22 = 31'd262144;
parameter    ap_ST_fsm_state23 = 31'd524288;
parameter    ap_ST_fsm_state24 = 31'd1048576;
parameter    ap_ST_fsm_state25 = 31'd2097152;
parameter    ap_ST_fsm_state26 = 31'd4194304;
parameter    ap_ST_fsm_state27 = 31'd8388608;
parameter    ap_ST_fsm_state28 = 31'd16777216;
parameter    ap_ST_fsm_pp1_stage0 = 31'd33554432;
parameter    ap_ST_fsm_pp1_stage1 = 31'd67108864;
parameter    ap_ST_fsm_state33 = 31'd134217728;
parameter    ap_ST_fsm_state34 = 31'd268435456;
parameter    ap_ST_fsm_state35 = 31'd536870912;
parameter    ap_ST_fsm_state36 = 31'd1073741824;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_DATA_WIDTH = 64;
parameter    C_M_AXI_DATA_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_PORT_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_port_AWVALID;
input   m_axi_data_port_AWREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_AWADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_AWID;
output  [7:0] m_axi_data_port_AWLEN;
output  [2:0] m_axi_data_port_AWSIZE;
output  [1:0] m_axi_data_port_AWBURST;
output  [1:0] m_axi_data_port_AWLOCK;
output  [3:0] m_axi_data_port_AWCACHE;
output  [2:0] m_axi_data_port_AWPROT;
output  [3:0] m_axi_data_port_AWQOS;
output  [3:0] m_axi_data_port_AWREGION;
output  [C_M_AXI_DATA_PORT_AWUSER_WIDTH - 1:0] m_axi_data_port_AWUSER;
output   m_axi_data_port_WVALID;
input   m_axi_data_port_WREADY;
output  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_WDATA;
output  [C_M_AXI_DATA_PORT_WSTRB_WIDTH - 1:0] m_axi_data_port_WSTRB;
output   m_axi_data_port_WLAST;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_WID;
output  [C_M_AXI_DATA_PORT_WUSER_WIDTH - 1:0] m_axi_data_port_WUSER;
output   m_axi_data_port_ARVALID;
input   m_axi_data_port_ARREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_ARADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_ARID;
output  [7:0] m_axi_data_port_ARLEN;
output  [2:0] m_axi_data_port_ARSIZE;
output  [1:0] m_axi_data_port_ARBURST;
output  [1:0] m_axi_data_port_ARLOCK;
output  [3:0] m_axi_data_port_ARCACHE;
output  [2:0] m_axi_data_port_ARPROT;
output  [3:0] m_axi_data_port_ARQOS;
output  [3:0] m_axi_data_port_ARREGION;
output  [C_M_AXI_DATA_PORT_ARUSER_WIDTH - 1:0] m_axi_data_port_ARUSER;
input   m_axi_data_port_RVALID;
output   m_axi_data_port_RREADY;
input  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_RDATA;
input   m_axi_data_port_RLAST;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_RID;
input  [C_M_AXI_DATA_PORT_RUSER_WIDTH - 1:0] m_axi_data_port_RUSER;
input  [1:0] m_axi_data_port_RRESP;
input   m_axi_data_port_BVALID;
output   m_axi_data_port_BREADY;
input  [1:0] m_axi_data_port_BRESP;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_BID;
input  [C_M_AXI_DATA_PORT_BUSER_WIDTH - 1:0] m_axi_data_port_BUSER;
input  [127:0] load_queue_V_V_TDATA;
input   load_queue_V_V_TVALID;
output   load_queue_V_V_TREADY;
input  [7:0] g2l_dep_queue_V_TDATA;
input   g2l_dep_queue_V_TVALID;
output   g2l_dep_queue_V_TREADY;
output  [7:0] l2g_dep_queue_V_TDATA;
output   l2g_dep_queue_V_TVALID;
input   l2g_dep_queue_V_TREADY;
output  [31:0] inp_mem_V_Addr_A;
output   inp_mem_V_EN_A;
output  [15:0] inp_mem_V_WEN_A;
output  [127:0] inp_mem_V_Din_A;
input  [127:0] inp_mem_V_Dout_A;
output   inp_mem_V_Clk_A;
output   inp_mem_V_Rst_A;
output  [31:0] wgt_mem_0_V_Addr_A;
output   wgt_mem_0_V_EN_A;
output  [127:0] wgt_mem_0_V_WEN_A;
output  [1023:0] wgt_mem_0_V_Din_A;
input  [1023:0] wgt_mem_0_V_Dout_A;
output   wgt_mem_0_V_Clk_A;
output   wgt_mem_0_V_Rst_A;
output  [31:0] wgt_mem_1_V_Addr_A;
output   wgt_mem_1_V_EN_A;
output  [127:0] wgt_mem_1_V_WEN_A;
output  [1023:0] wgt_mem_1_V_Din_A;
input  [1023:0] wgt_mem_1_V_Dout_A;
output   wgt_mem_1_V_Clk_A;
output   wgt_mem_1_V_Rst_A;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg[31:0] inp_mem_V_Addr_A;
reg inp_mem_V_EN_A;
reg[15:0] inp_mem_V_WEN_A;
reg[127:0] inp_mem_V_Din_A;
reg wgt_mem_0_V_EN_A;
reg[127:0] wgt_mem_0_V_WEN_A;
reg wgt_mem_1_V_EN_A;
reg[127:0] wgt_mem_1_V_WEN_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inputs_V;
wire   [31:0] weights_V;
reg   [127:0] load_queue_V_V_0_data_out;
wire    load_queue_V_V_0_vld_in;
wire    load_queue_V_V_0_vld_out;
wire    load_queue_V_V_0_ack_in;
reg    load_queue_V_V_0_ack_out;
reg   [127:0] load_queue_V_V_0_payload_A;
reg   [127:0] load_queue_V_V_0_payload_B;
reg    load_queue_V_V_0_sel_rd;
reg    load_queue_V_V_0_sel_wr;
wire    load_queue_V_V_0_sel;
wire    load_queue_V_V_0_load_A;
wire    load_queue_V_V_0_load_B;
reg   [1:0] load_queue_V_V_0_state;
wire    load_queue_V_V_0_state_cmp_full;
wire    g2l_dep_queue_V_0_vld_in;
wire    g2l_dep_queue_V_0_vld_out;
reg    g2l_dep_queue_V_0_ack_out;
reg   [1:0] g2l_dep_queue_V_0_state;
wire   [7:0] l2g_dep_queue_V_1_data_out;
reg    l2g_dep_queue_V_1_vld_in;
wire    l2g_dep_queue_V_1_vld_out;
wire    l2g_dep_queue_V_1_ack_in;
wire    l2g_dep_queue_V_1_ack_out;
reg    l2g_dep_queue_V_1_sel_rd;
wire    l2g_dep_queue_V_1_sel;
reg   [1:0] l2g_dep_queue_V_1_state;
reg    data_port_blk_n_AR;
wire    ap_CS_fsm_state22;
reg    data_port_blk_n_R;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond_reg_1423;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond1_reg_1280;
reg    load_queue_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    g2l_dep_queue_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_11_reg_1186;
reg    l2g_dep_queue_V_TDATA_blk_n;
wire    ap_CS_fsm_state35;
wire   [0:0] tmp_53_fu_1144_p3;
wire    ap_CS_fsm_state36;
reg   [0:0] tmp_53_reg_1479;
wire    data_port_AWREADY;
wire    data_port_WREADY;
reg    data_port_ARVALID;
wire    data_port_ARREADY;
reg   [31:0] data_port_ARADDR;
reg   [31:0] data_port_ARLEN;
wire    data_port_RVALID;
reg    data_port_RREADY;
wire   [63:0] data_port_RDATA;
wire    data_port_RLAST;
wire   [0:0] data_port_RID;
wire   [0:0] data_port_RUSER;
wire   [1:0] data_port_RRESP;
wire    data_port_BVALID;
wire   [1:0] data_port_BRESP;
wire   [0:0] data_port_BID;
wire   [0:0] data_port_BUSER;
reg   [20:0] indvar2_reg_360;
reg   [16:0] indvar_reg_402;
reg   [15:0] reg_459;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_608_p2;
wire   [0:0] tmp_10_fu_614_p2;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    grp_reset_mem_fu_413_ap_idle;
wire    grp_reset_mem_fu_413_ap_ready;
wire    grp_reset_mem_fu_413_ap_done;
reg   [15:0] reg_471;
reg   [28:0] tmp_reg_1151;
reg   [28:0] tmp_1_reg_1156;
wire   [37:0] tmp_cast_fu_495_p1;
reg   [37:0] tmp_cast_reg_1161;
wire   [33:0] tmp_1_cast_fu_498_p1;
reg   [33:0] tmp_1_cast_reg_1166;
reg   [127:0] tmp_V_reg_1171;
wire   [127:0] tmp_2_fu_509_p2;
reg    ap_block_state3;
wire   [3:0] tmp_65_cast_fu_514_p1;
reg   [3:0] tmp_65_cast_reg_1194;
wire   [15:0] tmp_3_fu_522_p4;
reg   [15:0] tmp_3_reg_1199;
wire   [3:0] tmp_5_fu_536_p1;
reg   [3:0] tmp_5_reg_1207;
wire  signed [15:0] x_width_V_fu_554_p2;
reg  signed [15:0] x_width_V_reg_1212;
wire   [15:0] this_assign_4_fu_560_p1;
reg   [15:0] this_assign_4_reg_1218;
wire   [15:0] y_offset_0_V_fu_576_p2;
reg   [15:0] y_offset_0_V_reg_1223;
wire   [15:0] y_offset_1_V_fu_594_p2;
reg   [15:0] y_offset_1_V_reg_1228;
reg   [0:0] tmp_7_reg_1233;
reg   [0:0] tmp_10_reg_1237;
wire   [31:0] tmp_14_fu_620_p1;
reg   [31:0] tmp_14_reg_1241;
wire   [20:0] tmp_110_add_i32_shr_fu_624_p3;
reg   [20:0] tmp_110_add_i32_shr_reg_1246;
wire   [31:0] tmp_110_add_i32_shr_s_fu_631_p1;
reg   [31:0] tmp_110_add_i32_shr_s_reg_1251;
wire   [15:0] y_1_fu_641_p2;
reg   [15:0] y_1_reg_1259;
wire    ap_CS_fsm_state5;
wire   [37:0] weights_V4_sum_fu_659_p2;
reg   [37:0] weights_V4_sum_reg_1264;
wire   [0:0] exitcond_i1_fu_635_p2;
reg    ap_sig_ioackin_data_port_ARREADY;
wire   [16:0] tmp_19_fu_678_p3;
reg   [16:0] tmp_19_reg_1275;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond1_fu_686_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state13_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_state17_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [20:0] indvar_next1_fu_691_p2;
reg   [20:0] indvar_next1_reg_1284;
wire   [0:0] tmp_55_fu_701_p1;
reg   [0:0] tmp_55_reg_1289;
reg   [0:0] tmp_55_reg_1289_pp0_iter1_reg;
reg   [11:0] tmp_32_reg_1294;
reg   [11:0] tmp_32_reg_1294_pp0_iter1_reg;
reg   [3:0] tmp_33_reg_1299;
reg   [63:0] data_port_addr_1_rea_reg_1304;
reg    ap_block_state14_pp0_stage1_iter0;
wire    ap_block_state16_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [9:0] tmp_34_fu_730_p3;
reg   [9:0] tmp_34_reg_1309;
wire   [9:0] tmp_35_fu_737_p2;
reg   [9:0] tmp_35_reg_1314;
wire   [0:0] tmp_56_fu_743_p2;
reg   [0:0] tmp_56_reg_1319;
wire   [1023:0] tmp_68_fu_803_p2;
reg   [1023:0] tmp_68_reg_1327;
wire   [1023:0] p_demorgan_fu_821_p2;
reg   [1023:0] p_demorgan_reg_1333;
reg   [9:0] wgt_mem_0_V_addr_reg_1339;
reg   [9:0] wgt_mem_1_V_addr_reg_1344;
wire   [1023:0] tmp_75_fu_847_p2;
reg   [1023:0] tmp_75_reg_1349;
wire   [15:0] sram_idx_V_assign_6_fu_877_p2;
wire    ap_CS_fsm_state18;
wire   [31:0] dram_idx_V_assign_3_fu_882_p2;
wire   [15:0] grp_reset_mem_fu_413_ap_return;
wire   [15:0] this_assign_3_fu_887_p1;
reg   [15:0] this_assign_3_reg_1369;
wire   [31:0] tmp_s_fu_890_p1;
reg   [31:0] tmp_s_reg_1374;
wire   [16:0] tmp_96_add_i32_shr_fu_894_p3;
reg   [16:0] tmp_96_add_i32_shr_reg_1379;
wire   [31:0] tmp_96_add_i32_shr_c_fu_901_p1;
reg   [31:0] tmp_96_add_i32_shr_c_reg_1384;
wire   [15:0] y_fu_911_p2;
reg   [15:0] y_reg_1392;
wire    ap_CS_fsm_state21;
wire   [33:0] inputs_V2_sum_fu_929_p2;
reg   [33:0] inputs_V2_sum_reg_1397;
wire   [0:0] exitcond_i_fu_905_p2;
reg   [15:0] sram_idx_V_assign_3_reg_1402;
wire   [12:0] tmp_16_fu_944_p1;
reg   [12:0] tmp_16_reg_1413;
wire   [13:0] tmp_17_fu_948_p3;
reg   [13:0] tmp_17_reg_1418;
wire    ap_CS_fsm_state28;
wire   [0:0] exitcond_fu_955_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state29_pp1_stage0_iter0;
wire    ap_block_state31_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_reg_1423_pp1_iter1_reg;
wire   [16:0] indvar_next_fu_960_p2;
reg   [16:0] indvar_next_reg_1427;
reg   [10:0] inp_mem_V_addr_reg_1432;
reg   [10:0] inp_mem_V_addr_reg_1432_pp1_iter1_reg;
wire   [0:0] tmp_23_fu_990_p1;
reg   [0:0] tmp_23_reg_1437;
reg   [63:0] data_port_addr_read_reg_1442;
reg    ap_block_state30_pp1_stage1_iter0;
wire    ap_block_state32_pp1_stage1_iter1;
reg    ap_block_pp1_stage1_11001;
wire   [0:0] tmp_26_fu_1007_p2;
reg   [0:0] tmp_26_reg_1447;
wire   [127:0] tmp_44_fu_1072_p2;
reg   [127:0] tmp_44_reg_1452;
wire   [127:0] p_demorgan9_fu_1090_p2;
reg   [127:0] p_demorgan9_reg_1458;
wire   [15:0] sram_idx_V_assign_4_fu_1134_p2;
reg   [15:0] sram_idx_V_assign_4_reg_1464;
wire    ap_CS_fsm_state33;
wire   [31:0] dram_idx_V_assign_2_fu_1139_p2;
reg   [31:0] dram_idx_V_assign_2_reg_1469;
wire    ap_CS_fsm_state34;
reg    ap_block_state35_io;
reg    ap_block_state35_on_subcall_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state29;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
wire    grp_reset_mem_fu_413_ap_start;
reg   [15:0] grp_reset_mem_fu_413_sram_idx_V_read;
reg   [15:0] grp_reset_mem_fu_413_range_V;
wire   [31:0] grp_reset_mem_fu_413_mem_V_Addr_A;
wire    grp_reset_mem_fu_413_mem_V_EN_A;
wire   [15:0] grp_reset_mem_fu_413_mem_V_WEN_A;
wire   [127:0] grp_reset_mem_fu_413_mem_V_Din_A;
reg   [15:0] sram_idx_V_assign_s_reg_329;
reg   [31:0] dram_idx_assign_1_reg_339;
reg   [15:0] y_0_i1_reg_349;
reg   [20:0] ap_phi_mux_indvar2_phi_fu_364_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] sram_idx_V_assign2_reg_371;
reg   [31:0] dram_idx_assign_reg_381;
reg   [15:0] y_0_i_reg_391;
reg   [16:0] ap_phi_mux_indvar_phi_fu_406_p4;
wire    ap_block_pp1_stage0;
reg    grp_reset_mem_fu_413_ap_start_reg;
wire   [63:0] tmp_128_cast_fu_827_p1;
wire   [63:0] tmp_116_cast_fu_985_p1;
wire   [63:0] weights_V4_sum_cast_fu_664_p1;
wire   [63:0] inputs_V2_sum_cast_fu_934_p1;
reg    ap_reg_ioackin_data_port_ARREADY;
reg    ap_block_state36_io;
reg   [31:0] wgt_mem_1_V_Addr_A_orig;
wire   [1023:0] tmp_76_fu_870_p2;
reg   [31:0] wgt_mem_0_V_Addr_A_orig;
reg   [31:0] inp_mem_V_Addr_A_orig;
wire   [127:0] tmp_52_fu_1127_p2;
wire   [127:0] tmp_4_fu_531_p2;
wire   [4:0] this_assign_4_cast_fu_540_p1;
wire   [4:0] tmp_66_cast_fu_518_p1;
wire   [4:0] tmp2_fu_544_p2;
wire   [15:0] tmp22_cast_fu_550_p1;
wire   [3:0] tmp_74_cast_fu_563_p4;
wire   [3:0] y_offset_0_V_fu_576_p1;
wire   [3:0] tmp_78_cast_fu_581_p4;
wire   [3:0] y_offset_1_V_fu_594_p1;
wire   [1:0] tmp_6_fu_599_p4;
wire   [15:0] grp_fu_450_p4;
wire   [36:0] r_V_1_fu_647_p3;
wire   [37:0] r_V_1_cast_cast_fu_655_p1;
wire   [11:0] tmp_18_fu_674_p1;
wire   [16:0] tmp_54_fu_697_p1;
wire   [16:0] tmp_31_fu_705_p2;
wire   [10:0] tmp_57_fu_749_p1;
wire   [10:0] tmp_58_fu_752_p1;
wire   [10:0] tmp_60_fu_758_p2;
wire   [10:0] tmp_61_fu_764_p3;
wire   [10:0] tmp_63_fu_778_p3;
wire   [10:0] tmp_62_fu_771_p3;
wire   [10:0] tmp_64_fu_785_p2;
wire   [1023:0] tmp_59_fu_755_p1;
wire   [1023:0] tmp_65_fu_791_p1;
wire   [1023:0] tmp_66_fu_795_p1;
wire   [1023:0] tmp_67_fu_799_p1;
wire   [1023:0] tmp_71_fu_809_p2;
wire   [1023:0] tmp_72_fu_815_p2;
reg   [1023:0] tmp_69_fu_832_p4;
wire   [1023:0] tmp_70_fu_841_p3;
wire   [1023:0] p_phi_fu_852_p3;
wire   [1023:0] tmp_73_fu_859_p2;
wire   [1023:0] tmp_74_fu_864_p2;
wire   [32:0] r_V_fu_917_p3;
wire   [33:0] r_V_cast_cast_fu_925_p1;
wire   [13:0] tmp_20_fu_966_p1;
wire   [13:0] tmp_21_fu_970_p2;
wire   [12:0] tmp_22_fu_975_p4;
wire   [6:0] tmp_24_fu_994_p3;
wire   [6:0] tmp_25_fu_1001_p2;
wire   [7:0] tmp_27_fu_1013_p1;
wire   [7:0] tmp_28_fu_1017_p1;
wire   [7:0] tmp_36_fu_1024_p2;
wire   [7:0] tmp_37_fu_1030_p3;
wire   [7:0] tmp_39_fu_1046_p3;
wire   [7:0] tmp_38_fu_1038_p3;
wire   [7:0] tmp_40_fu_1054_p2;
wire   [127:0] tmp_30_fu_1021_p1;
wire   [127:0] tmp_41_fu_1060_p1;
wire   [127:0] tmp_42_fu_1064_p1;
wire   [127:0] tmp_43_fu_1068_p1;
wire   [127:0] tmp_47_fu_1078_p2;
wire   [127:0] tmp_48_fu_1084_p2;
reg   [127:0] tmp_45_fu_1096_p4;
wire   [127:0] tmp_49_fu_1111_p2;
wire   [127:0] tmp_46_fu_1105_p3;
wire   [127:0] tmp_50_fu_1116_p2;
wire   [127:0] tmp_51_fu_1122_p2;
reg   [30:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [15:0] y_offset_0_V_fu_576_p10;
wire   [15:0] y_offset_1_V_fu_594_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
#0 load_queue_V_V_0_sel_rd = 1'b0;
#0 load_queue_V_V_0_sel_wr = 1'b0;
#0 load_queue_V_V_0_state = 2'd0;
#0 g2l_dep_queue_V_0_state = 2'd0;
#0 l2g_dep_queue_V_1_sel_rd = 1'b0;
#0 l2g_dep_queue_V_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_reset_mem_fu_413_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_data_port_ARREADY = 1'b0;
end

load_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
load_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputs_V(inputs_V),
    .weights_V(weights_V)
);

load_data_port_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_PORT_CACHE_VALUE ))
load_data_port_m_axi_U(
    .AWVALID(m_axi_data_port_AWVALID),
    .AWREADY(m_axi_data_port_AWREADY),
    .AWADDR(m_axi_data_port_AWADDR),
    .AWID(m_axi_data_port_AWID),
    .AWLEN(m_axi_data_port_AWLEN),
    .AWSIZE(m_axi_data_port_AWSIZE),
    .AWBURST(m_axi_data_port_AWBURST),
    .AWLOCK(m_axi_data_port_AWLOCK),
    .AWCACHE(m_axi_data_port_AWCACHE),
    .AWPROT(m_axi_data_port_AWPROT),
    .AWQOS(m_axi_data_port_AWQOS),
    .AWREGION(m_axi_data_port_AWREGION),
    .AWUSER(m_axi_data_port_AWUSER),
    .WVALID(m_axi_data_port_WVALID),
    .WREADY(m_axi_data_port_WREADY),
    .WDATA(m_axi_data_port_WDATA),
    .WSTRB(m_axi_data_port_WSTRB),
    .WLAST(m_axi_data_port_WLAST),
    .WID(m_axi_data_port_WID),
    .WUSER(m_axi_data_port_WUSER),
    .ARVALID(m_axi_data_port_ARVALID),
    .ARREADY(m_axi_data_port_ARREADY),
    .ARADDR(m_axi_data_port_ARADDR),
    .ARID(m_axi_data_port_ARID),
    .ARLEN(m_axi_data_port_ARLEN),
    .ARSIZE(m_axi_data_port_ARSIZE),
    .ARBURST(m_axi_data_port_ARBURST),
    .ARLOCK(m_axi_data_port_ARLOCK),
    .ARCACHE(m_axi_data_port_ARCACHE),
    .ARPROT(m_axi_data_port_ARPROT),
    .ARQOS(m_axi_data_port_ARQOS),
    .ARREGION(m_axi_data_port_ARREGION),
    .ARUSER(m_axi_data_port_ARUSER),
    .RVALID(m_axi_data_port_RVALID),
    .RREADY(m_axi_data_port_RREADY),
    .RDATA(m_axi_data_port_RDATA),
    .RLAST(m_axi_data_port_RLAST),
    .RID(m_axi_data_port_RID),
    .RUSER(m_axi_data_port_RUSER),
    .RRESP(m_axi_data_port_RRESP),
    .BVALID(m_axi_data_port_BVALID),
    .BREADY(m_axi_data_port_BREADY),
    .BRESP(m_axi_data_port_BRESP),
    .BID(m_axi_data_port_BID),
    .BUSER(m_axi_data_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_port_ARVALID),
    .I_ARREADY(data_port_ARREADY),
    .I_ARADDR(data_port_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(data_port_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_port_RVALID),
    .I_RREADY(data_port_RREADY),
    .I_RDATA(data_port_RDATA),
    .I_RID(data_port_RID),
    .I_RUSER(data_port_RUSER),
    .I_RRESP(data_port_RRESP),
    .I_RLAST(data_port_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(data_port_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(data_port_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(data_port_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(data_port_BRESP),
    .I_BID(data_port_BID),
    .I_BUSER(data_port_BUSER)
);

reset_mem grp_reset_mem_fu_413(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_reset_mem_fu_413_ap_start),
    .ap_done(grp_reset_mem_fu_413_ap_done),
    .ap_idle(grp_reset_mem_fu_413_ap_idle),
    .ap_ready(grp_reset_mem_fu_413_ap_ready),
    .sram_idx_V_read(grp_reset_mem_fu_413_sram_idx_V_read),
    .range_V(grp_reset_mem_fu_413_range_V),
    .mem_V_Addr_A(grp_reset_mem_fu_413_mem_V_Addr_A),
    .mem_V_EN_A(grp_reset_mem_fu_413_mem_V_EN_A),
    .mem_V_WEN_A(grp_reset_mem_fu_413_mem_V_WEN_A),
    .mem_V_Din_A(grp_reset_mem_fu_413_mem_V_Din_A),
    .mem_V_Dout_A(128'd0),
    .ap_return(grp_reset_mem_fu_413_ap_return)
);

load_mul_16s_4ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
load_mul_16s_4ns_bkb_U3(
    .din0(x_width_V_reg_1212),
    .din1(y_offset_0_V_fu_576_p1),
    .dout(y_offset_0_V_fu_576_p2)
);

load_mul_16s_4ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
load_mul_16s_4ns_bkb_U4(
    .din0(x_width_V_reg_1212),
    .din1(y_offset_1_V_fu_594_p1),
    .dout(y_offset_1_V_fu_594_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state13)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state29);
        end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_data_port_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | (~((ap_sig_ioackin_data_port_ARREADY == 1'b0) | (grp_reset_mem_fu_413_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state22)))) begin
            ap_reg_ioackin_data_port_ARREADY <= 1'b0;
        end else if ((((data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_reset_mem_fu_413_ap_done == 1'b1) & (data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
            ap_reg_ioackin_data_port_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        g2l_dep_queue_V_0_state <= 2'd0;
    end else begin
        if ((((g2l_dep_queue_V_0_vld_in == 1'b0) & (g2l_dep_queue_V_0_state == 2'd2)) | ((g2l_dep_queue_V_0_vld_in == 1'b0) & (g2l_dep_queue_V_0_ack_out == 1'b1) & (g2l_dep_queue_V_0_state == 2'd3)))) begin
            g2l_dep_queue_V_0_state <= 2'd2;
        end else if ((((g2l_dep_queue_V_0_ack_out == 1'b0) & (g2l_dep_queue_V_0_state == 2'd1)) | ((g2l_dep_queue_V_0_ack_out == 1'b0) & (g2l_dep_queue_V_0_vld_in == 1'b1) & (g2l_dep_queue_V_0_state == 2'd3)))) begin
            g2l_dep_queue_V_0_state <= 2'd1;
        end else if (((~((g2l_dep_queue_V_0_vld_in == 1'b0) & (g2l_dep_queue_V_0_ack_out == 1'b1)) & ~((g2l_dep_queue_V_0_ack_out == 1'b0) & (g2l_dep_queue_V_0_vld_in == 1'b1)) & (g2l_dep_queue_V_0_state == 2'd3)) | ((g2l_dep_queue_V_0_ack_out == 1'b1) & (g2l_dep_queue_V_0_state == 2'd1)) | ((g2l_dep_queue_V_0_vld_in == 1'b1) & (g2l_dep_queue_V_0_state == 2'd2)))) begin
            g2l_dep_queue_V_0_state <= 2'd3;
        end else begin
            g2l_dep_queue_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_reset_mem_fu_413_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state21) & (exitcond_i_fu_905_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state21) & (exitcond_i_fu_905_p2 == 1'd0)))) begin
            grp_reset_mem_fu_413_ap_start_reg <= 1'b1;
        end else if ((grp_reset_mem_fu_413_ap_ready == 1'b1)) begin
            grp_reset_mem_fu_413_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        l2g_dep_queue_V_1_sel_rd <= 1'b0;
    end else begin
        if (((l2g_dep_queue_V_1_ack_out == 1'b1) & (l2g_dep_queue_V_1_vld_out == 1'b1))) begin
            l2g_dep_queue_V_1_sel_rd <= ~l2g_dep_queue_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        l2g_dep_queue_V_1_state <= 2'd0;
    end else begin
        if ((((l2g_dep_queue_V_1_vld_in == 1'b0) & (l2g_dep_queue_V_1_state == 2'd2)) | ((l2g_dep_queue_V_1_vld_in == 1'b0) & (l2g_dep_queue_V_1_ack_out == 1'b1) & (l2g_dep_queue_V_1_state == 2'd3)))) begin
            l2g_dep_queue_V_1_state <= 2'd2;
        end else if ((((l2g_dep_queue_V_1_ack_out == 1'b0) & (l2g_dep_queue_V_1_state == 2'd1)) | ((l2g_dep_queue_V_1_ack_out == 1'b0) & (l2g_dep_queue_V_1_vld_in == 1'b1) & (l2g_dep_queue_V_1_state == 2'd3)))) begin
            l2g_dep_queue_V_1_state <= 2'd1;
        end else if (((~((l2g_dep_queue_V_1_vld_in == 1'b0) & (l2g_dep_queue_V_1_ack_out == 1'b1)) & ~((l2g_dep_queue_V_1_ack_out == 1'b0) & (l2g_dep_queue_V_1_vld_in == 1'b1)) & (l2g_dep_queue_V_1_state == 2'd3)) | ((l2g_dep_queue_V_1_ack_out == 1'b1) & (l2g_dep_queue_V_1_state == 2'd1)) | ((l2g_dep_queue_V_1_vld_in == 1'b1) & (l2g_dep_queue_V_1_state == 2'd2)))) begin
            l2g_dep_queue_V_1_state <= 2'd3;
        end else begin
            l2g_dep_queue_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        load_queue_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((load_queue_V_V_0_ack_out == 1'b1) & (load_queue_V_V_0_vld_out == 1'b1))) begin
            load_queue_V_V_0_sel_rd <= ~load_queue_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        load_queue_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((load_queue_V_V_0_ack_in == 1'b1) & (load_queue_V_V_0_vld_in == 1'b1))) begin
            load_queue_V_V_0_sel_wr <= ~load_queue_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        load_queue_V_V_0_state <= 2'd0;
    end else begin
        if ((((load_queue_V_V_0_vld_in == 1'b0) & (load_queue_V_V_0_state == 2'd2)) | ((load_queue_V_V_0_vld_in == 1'b0) & (load_queue_V_V_0_ack_out == 1'b1) & (load_queue_V_V_0_state == 2'd3)))) begin
            load_queue_V_V_0_state <= 2'd2;
        end else if ((((load_queue_V_V_0_ack_out == 1'b0) & (load_queue_V_V_0_state == 2'd1)) | ((load_queue_V_V_0_ack_out == 1'b0) & (load_queue_V_V_0_vld_in == 1'b1) & (load_queue_V_V_0_state == 2'd3)))) begin
            load_queue_V_V_0_state <= 2'd1;
        end else if (((~((load_queue_V_V_0_vld_in == 1'b0) & (load_queue_V_V_0_ack_out == 1'b1)) & ~((load_queue_V_V_0_ack_out == 1'b0) & (load_queue_V_V_0_vld_in == 1'b1)) & (load_queue_V_V_0_state == 2'd3)) | ((load_queue_V_V_0_ack_out == 1'b1) & (load_queue_V_V_0_state == 2'd1)) | ((load_queue_V_V_0_vld_in == 1'b1) & (load_queue_V_V_0_state == 2'd2)))) begin
            load_queue_V_V_0_state <= 2'd3;
        end else begin
            load_queue_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dram_idx_assign_1_reg_339 <= dram_idx_V_assign_3_fu_882_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_10_fu_614_p2 == 1'd1) & (tmp_7_fu_608_p2 == 1'd0))) begin
        dram_idx_assign_1_reg_339 <= {{tmp_V_reg_1171[56:25]}};
    end
end

always @ (posedge ap_clk) begin
    if ((grp_reset_mem_fu_413_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            dram_idx_assign_reg_381 <= dram_idx_V_assign_2_reg_1469;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            dram_idx_assign_reg_381 <= {{tmp_V_reg_1171[56:25]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1280 == 1'd0))) begin
        indvar2_reg_360 <= indvar_next1_reg_1284;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        indvar2_reg_360 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1423 == 1'd0))) begin
        indvar_reg_402 <= indvar_next_reg_1427;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        indvar_reg_402 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sram_idx_V_assign_s_reg_329 <= sram_idx_V_assign_6_fu_877_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_10_fu_614_p2 == 1'd1) & (tmp_7_fu_608_p2 == 1'd0))) begin
        sram_idx_V_assign_s_reg_329 <= {{tmp_V_reg_1171[24:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        y_0_i1_reg_349 <= y_1_reg_1259;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_10_fu_614_p2 == 1'd1) & (tmp_7_fu_608_p2 == 1'd0))) begin
        y_0_i1_reg_349 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_reset_mem_fu_413_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            y_0_i_reg_391 <= y_reg_1392;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            y_0_i_reg_391 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond1_reg_1280 == 1'd0))) begin
        data_port_addr_1_rea_reg_1304 <= data_port_RDATA;
        tmp_34_reg_1309[9 : 6] <= tmp_34_fu_730_p3[9 : 6];
        tmp_35_reg_1314[9 : 6] <= tmp_35_fu_737_p2[9 : 6];
        tmp_56_reg_1319 <= tmp_56_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1423 == 1'd0))) begin
        data_port_addr_read_reg_1442 <= data_port_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        dram_idx_V_assign_2_reg_1469 <= dram_idx_V_assign_2_fu_1139_p2;
        sram_idx_V_assign_4_reg_1464 <= sram_idx_V_assign_4_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_1280 <= exitcond1_fu_686_p2;
        p_demorgan_reg_1333 <= p_demorgan_fu_821_p2;
        tmp_32_reg_1294_pp0_iter1_reg <= tmp_32_reg_1294;
        tmp_55_reg_1289_pp0_iter1_reg <= tmp_55_reg_1289;
        tmp_68_reg_1327 <= tmp_68_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_1423 <= exitcond_fu_955_p2;
        exitcond_reg_1423_pp1_iter1_reg <= exitcond_reg_1423;
        inp_mem_V_addr_reg_1432_pp1_iter1_reg <= inp_mem_V_addr_reg_1432;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_next1_reg_1284 <= indvar_next1_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_next_reg_1427 <= indvar_next_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_955_p2 == 1'd0))) begin
        inp_mem_V_addr_reg_1432 <= tmp_116_cast_fu_985_p1;
        tmp_23_reg_1437 <= tmp_23_fu_990_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_i_fu_905_p2 == 1'd0))) begin
        inputs_V2_sum_reg_1397 <= inputs_V2_sum_fu_929_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((load_queue_V_V_0_load_A == 1'b1)) begin
        load_queue_V_V_0_payload_A <= load_queue_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((load_queue_V_V_0_load_B == 1'b1)) begin
        load_queue_V_V_0_payload_B <= load_queue_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1423 == 1'd0))) begin
        p_demorgan9_reg_1458 <= p_demorgan9_fu_1090_p2;
        tmp_26_reg_1447 <= tmp_26_fu_1007_p2;
        tmp_44_reg_1452 <= tmp_44_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state4) & (tmp_10_fu_614_p2 == 1'd1) & (tmp_7_fu_608_p2 == 1'd0)))) begin
        reg_459 <= {{tmp_V_reg_1171[24:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_10_fu_614_p2 == 1'd1) & (tmp_7_fu_608_p2 == 1'd0)))) begin
        reg_471 <= {{tmp_V_reg_1171[79:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        sram_idx_V_assign2_reg_371 <= grp_reset_mem_fu_413_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_sig_ioackin_data_port_ARREADY == 1'b0) | (grp_reset_mem_fu_413_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
        sram_idx_V_assign_3_reg_1402 <= grp_reset_mem_fu_413_ap_return;
        tmp_16_reg_1413 <= tmp_16_fu_944_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        this_assign_3_reg_1369[3 : 0] <= this_assign_3_fu_887_p1[3 : 0];
        tmp_96_add_i32_shr_c_reg_1384[16 : 1] <= tmp_96_add_i32_shr_c_fu_901_p1[16 : 1];
        tmp_96_add_i32_shr_reg_1379[16 : 1] <= tmp_96_add_i32_shr_fu_894_p3[16 : 1];
        tmp_s_reg_1374[15 : 0] <= tmp_s_fu_890_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        this_assign_4_reg_1218[3 : 0] <= this_assign_4_fu_560_p1[3 : 0];
        tmp_7_reg_1233 <= tmp_7_fu_608_p2;
        y_offset_0_V_reg_1223 <= y_offset_0_V_fu_576_p2;
        y_offset_1_V_reg_1228 <= y_offset_1_V_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_608_p2 == 1'd0))) begin
        tmp_10_reg_1237 <= tmp_10_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_10_fu_614_p2 == 1'd1) & (tmp_7_fu_608_p2 == 1'd0))) begin
        tmp_110_add_i32_shr_reg_1246[20 : 5] <= tmp_110_add_i32_shr_fu_624_p3[20 : 5];
        tmp_110_add_i32_shr_s_reg_1251[20 : 5] <= tmp_110_add_i32_shr_s_fu_631_p1[20 : 5];
        tmp_14_reg_1241[15 : 0] <= tmp_14_fu_620_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (load_queue_V_V_0_vld_out == 1'b1))) begin
        tmp_11_reg_1186 <= load_queue_V_V_0_data_out[32'd4];
        tmp_1_cast_reg_1166[28 : 0] <= tmp_1_cast_fu_498_p1[28 : 0];
        tmp_V_reg_1171 <= load_queue_V_V_0_data_out;
        tmp_cast_reg_1161[28 : 0] <= tmp_cast_fu_495_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_17_reg_1418[13 : 1] <= tmp_17_fu_948_p3[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_19_reg_1275[16 : 5] <= tmp_19_fu_678_p3[16 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_1156 <= {{inputs_V[31:3]}};
        tmp_reg_1151 <= {{weights_V[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_fu_686_p2 == 1'd0))) begin
        tmp_32_reg_1294 <= {{tmp_31_fu_705_p2[16:5]}};
        tmp_33_reg_1299 <= {{ap_phi_mux_indvar2_phi_fu_364_p4[4:1]}};
        tmp_55_reg_1289 <= tmp_55_fu_701_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_11_reg_1186 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_reg_1199 <= {{tmp_V_reg_1171[95:80]}};
        tmp_5_reg_1207 <= tmp_5_fu_536_p1;
        tmp_65_cast_reg_1194 <= tmp_65_cast_fu_514_p1;
        x_width_V_reg_1212 <= x_width_V_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state35_on_subcall_done) | (1'b1 == ap_block_state35_io)) & (1'b1 == ap_CS_fsm_state35))) begin
        tmp_53_reg_1479 <= tmp_V_reg_1171[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_75_reg_1349 <= tmp_75_fu_847_p2;
        wgt_mem_0_V_addr_reg_1339 <= tmp_128_cast_fu_827_p1;
        wgt_mem_1_V_addr_reg_1344 <= tmp_128_cast_fu_827_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_10_reg_1237 == 1'd1) & (exitcond_i1_fu_635_p2 == 1'd0))) begin
        weights_V4_sum_reg_1264 <= weights_V4_sum_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_10_reg_1237 == 1'd1))) begin
        y_1_reg_1259 <= y_1_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        y_reg_1392 <= y_fu_911_p2;
    end
end

always @ (*) begin
    if ((exitcond1_fu_686_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_955_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state36_io) | (l2g_dep_queue_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_1280 == 1'd0))) begin
        ap_phi_mux_indvar2_phi_fu_364_p4 = indvar_next1_reg_1284;
    end else begin
        ap_phi_mux_indvar2_phi_fu_364_p4 = indvar2_reg_360;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1423 == 1'd0))) begin
        ap_phi_mux_indvar_phi_fu_406_p4 = indvar_next_reg_1427;
    end else begin
        ap_phi_mux_indvar_phi_fu_406_p4 = indvar_reg_402;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state36_io) | (l2g_dep_queue_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_port_ARREADY == 1'b0)) begin
        ap_sig_ioackin_data_port_ARREADY = data_port_ARREADY;
    end else begin
        ap_sig_ioackin_data_port_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_port_ARREADY == 1'b0)) begin
        if (((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
            data_port_ARADDR = inputs_V2_sum_cast_fu_934_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            data_port_ARADDR = weights_V4_sum_cast_fu_664_p1;
        end else begin
            data_port_ARADDR = 'bx;
        end
    end else begin
        data_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_data_port_ARREADY == 1'b0)) begin
        if (((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
            data_port_ARLEN = tmp_96_add_i32_shr_c_reg_1384;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            data_port_ARLEN = tmp_110_add_i32_shr_s_reg_1251;
        end else begin
            data_port_ARLEN = 'bx;
        end
    end else begin
        data_port_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_data_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state6)) | ((grp_reset_mem_fu_413_ap_done == 1'b1) & (ap_reg_ioackin_data_port_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state22)))) begin
        data_port_ARVALID = 1'b1;
    end else begin
        data_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond1_reg_1280 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1423 == 1'd0)))) begin
        data_port_RREADY = 1'b1;
    end else begin
        data_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state22))) begin
        data_port_blk_n_AR = m_axi_data_port_ARREADY;
    end else begin
        data_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond1_reg_1280 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1423 == 1'd0)))) begin
        data_port_blk_n_R = m_axi_data_port_RVALID;
    end else begin
        data_port_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_11_reg_1186 == 1'd1)) & (1'b1 == ap_CS_fsm_state3) & (tmp_11_reg_1186 == 1'd1))) begin
        g2l_dep_queue_V_0_ack_out = 1'b1;
    end else begin
        g2l_dep_queue_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_11_reg_1186 == 1'd1))) begin
        g2l_dep_queue_V_TDATA_blk_n = g2l_dep_queue_V_0_state[1'd0];
    end else begin
        g2l_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_reset_mem_fu_413_range_V = this_assign_4_reg_1218;
    end else if (((1'b1 == ap_CS_fsm_state35) & (tmp_7_reg_1233 == 1'd1))) begin
        grp_reset_mem_fu_413_range_V = y_offset_1_V_reg_1228;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_reset_mem_fu_413_range_V = this_assign_3_reg_1369;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_reset_mem_fu_413_range_V = y_offset_0_V_reg_1223;
    end else begin
        grp_reset_mem_fu_413_range_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_reset_mem_fu_413_sram_idx_V_read = sram_idx_V_assign_4_reg_1464;
    end else if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state35) & (tmp_7_reg_1233 == 1'd1)))) begin
        grp_reset_mem_fu_413_sram_idx_V_read = sram_idx_V_assign2_reg_371;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_reset_mem_fu_413_sram_idx_V_read = reg_459;
    end else begin
        grp_reset_mem_fu_413_sram_idx_V_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state35) & (tmp_7_reg_1233 == 1'd1)))) begin
        inp_mem_V_Addr_A = grp_reset_mem_fu_413_mem_V_Addr_A;
    end else begin
        inp_mem_V_Addr_A = inp_mem_V_Addr_A_orig << 32'd4;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            inp_mem_V_Addr_A_orig = inp_mem_V_addr_reg_1432_pp1_iter1_reg;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            inp_mem_V_Addr_A_orig = inp_mem_V_addr_reg_1432;
        end else begin
            inp_mem_V_Addr_A_orig = 'bx;
        end
    end else begin
        inp_mem_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        inp_mem_V_Din_A = tmp_52_fu_1127_p2;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state35) & (tmp_7_reg_1233 == 1'd1)))) begin
        inp_mem_V_Din_A = grp_reset_mem_fu_413_mem_V_Din_A;
    end else begin
        inp_mem_V_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        inp_mem_V_EN_A = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state35) & (tmp_7_reg_1233 == 1'd1)))) begin
        inp_mem_V_EN_A = grp_reset_mem_fu_413_mem_V_EN_A;
    end else begin
        inp_mem_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_1423_pp1_iter1_reg == 1'd0))) begin
        inp_mem_V_WEN_A = 16'd65535;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state35) & (tmp_7_reg_1233 == 1'd1)))) begin
        inp_mem_V_WEN_A = grp_reset_mem_fu_413_mem_V_WEN_A;
    end else begin
        inp_mem_V_WEN_A = 16'd0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state35_on_subcall_done) | (1'b1 == ap_block_state35_io)) & (1'b1 == ap_CS_fsm_state35) & (tmp_53_fu_1144_p3 == 1'd1))) begin
        l2g_dep_queue_V_1_vld_in = 1'b1;
    end else begin
        l2g_dep_queue_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state36) & (tmp_53_reg_1479 == 1'd1)) | ((1'b1 == ap_CS_fsm_state35) & (tmp_53_fu_1144_p3 == 1'd1)))) begin
        l2g_dep_queue_V_TDATA_blk_n = l2g_dep_queue_V_1_state[1'd1];
    end else begin
        l2g_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (load_queue_V_V_0_vld_out == 1'b1))) begin
        load_queue_V_V_0_ack_out = 1'b1;
    end else begin
        load_queue_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((load_queue_V_V_0_sel == 1'b1)) begin
        load_queue_V_V_0_data_out = load_queue_V_V_0_payload_B;
    end else begin
        load_queue_V_V_0_data_out = load_queue_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        load_queue_V_V_TDATA_blk_n = load_queue_V_V_0_state[1'd0];
    end else begin
        load_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wgt_mem_0_V_Addr_A_orig = wgt_mem_0_V_addr_reg_1339;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wgt_mem_0_V_Addr_A_orig = tmp_128_cast_fu_827_p1;
    end else begin
        wgt_mem_0_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        wgt_mem_0_V_EN_A = 1'b1;
    end else begin
        wgt_mem_0_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_55_reg_1289_pp0_iter1_reg == 1'd0))) begin
        wgt_mem_0_V_WEN_A = 128'd340282366920938463463374607431768211455;
    end else begin
        wgt_mem_0_V_WEN_A = 128'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wgt_mem_1_V_Addr_A_orig = wgt_mem_1_V_addr_reg_1344;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wgt_mem_1_V_Addr_A_orig = tmp_128_cast_fu_827_p1;
    end else begin
        wgt_mem_1_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        wgt_mem_1_V_EN_A = 1'b1;
    end else begin
        wgt_mem_1_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_55_reg_1289_pp0_iter1_reg == 1'd1))) begin
        wgt_mem_1_V_WEN_A = 128'd340282366920938463463374607431768211455;
    end else begin
        wgt_mem_1_V_WEN_A = 128'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (load_queue_V_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_11_reg_1186 == 1'd1)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_7_fu_608_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((exitcond_i1_fu_635_p2 == 1'd1) | (tmp_10_reg_1237 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_sig_ioackin_data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_686_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_686_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond_i_fu_905_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((ap_sig_ioackin_data_port_ARREADY == 1'b0) | (grp_reset_mem_fu_413_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_955_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_955_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((grp_reset_mem_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if ((~((1'b1 == ap_block_state35_on_subcall_done) | (1'b1 == ap_block_state35_io)) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if ((~((1'b1 == ap_block_state36_io) | (l2g_dep_queue_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_1280 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_1280 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_reg_1423 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_reg_1423 == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage1_iter0 = ((data_port_RVALID == 1'b0) & (exitcond1_reg_1280 == 1'd0));
end

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_11_reg_1186 == 1'd1));
end

always @ (*) begin
    ap_block_state30_pp1_stage1_iter0 = ((data_port_RVALID == 1'b0) & (exitcond_reg_1423 == 1'd0));
end

assign ap_block_state31_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((l2g_dep_queue_V_1_ack_in == 1'b0) & (tmp_53_fu_1144_p3 == 1'd1));
end

always @ (*) begin
    ap_block_state35_on_subcall_done = ((grp_reset_mem_fu_413_ap_done == 1'b0) & (tmp_7_reg_1233 == 1'd1));
end

always @ (*) begin
    ap_block_state36_io = ((l2g_dep_queue_V_1_ack_in == 1'b0) & (tmp_53_reg_1479 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dram_idx_V_assign_2_fu_1139_p2 = (tmp_s_reg_1374 + dram_idx_assign_reg_381);

assign dram_idx_V_assign_3_fu_882_p2 = (tmp_14_reg_1241 + dram_idx_assign_1_reg_339);

assign exitcond1_fu_686_p2 = ((ap_phi_mux_indvar2_phi_fu_364_p4 == tmp_110_add_i32_shr_reg_1246) ? 1'b1 : 1'b0);

assign exitcond_fu_955_p2 = ((ap_phi_mux_indvar_phi_fu_406_p4 == tmp_96_add_i32_shr_reg_1379) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_635_p2 = ((y_0_i1_reg_349 == reg_471) ? 1'b1 : 1'b0);

assign exitcond_i_fu_905_p2 = ((y_0_i_reg_391 == reg_471) ? 1'b1 : 1'b0);

assign g2l_dep_queue_V_0_vld_in = g2l_dep_queue_V_TVALID;

assign g2l_dep_queue_V_0_vld_out = g2l_dep_queue_V_0_state[1'd0];

assign g2l_dep_queue_V_TREADY = g2l_dep_queue_V_0_state[1'd1];

assign grp_fu_450_p4 = {{tmp_V_reg_1171[111:96]}};

assign grp_reset_mem_fu_413_ap_start = grp_reset_mem_fu_413_ap_start_reg;

assign indvar_next1_fu_691_p2 = (ap_phi_mux_indvar2_phi_fu_364_p4 + 21'd1);

assign indvar_next_fu_960_p2 = (ap_phi_mux_indvar_phi_fu_406_p4 + 17'd1);

assign inp_mem_V_Clk_A = ap_clk;

assign inp_mem_V_Rst_A = ap_rst_n_inv;

assign inputs_V2_sum_cast_fu_934_p1 = inputs_V2_sum_reg_1397;

assign inputs_V2_sum_fu_929_p2 = (tmp_1_cast_reg_1166 + r_V_cast_cast_fu_925_p1);

assign l2g_dep_queue_V_1_ack_in = l2g_dep_queue_V_1_state[1'd1];

assign l2g_dep_queue_V_1_ack_out = l2g_dep_queue_V_TREADY;

assign l2g_dep_queue_V_1_data_out = 8'd1;

assign l2g_dep_queue_V_1_sel = l2g_dep_queue_V_1_sel_rd;

assign l2g_dep_queue_V_1_vld_out = l2g_dep_queue_V_1_state[1'd0];

assign l2g_dep_queue_V_TDATA = l2g_dep_queue_V_1_data_out;

assign l2g_dep_queue_V_TVALID = l2g_dep_queue_V_1_state[1'd0];

assign load_queue_V_V_0_ack_in = load_queue_V_V_0_state[1'd1];

assign load_queue_V_V_0_load_A = (load_queue_V_V_0_state_cmp_full & ~load_queue_V_V_0_sel_wr);

assign load_queue_V_V_0_load_B = (load_queue_V_V_0_state_cmp_full & load_queue_V_V_0_sel_wr);

assign load_queue_V_V_0_sel = load_queue_V_V_0_sel_rd;

assign load_queue_V_V_0_state_cmp_full = ((load_queue_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign load_queue_V_V_0_vld_in = load_queue_V_V_TVALID;

assign load_queue_V_V_0_vld_out = load_queue_V_V_0_state[1'd0];

assign load_queue_V_V_TREADY = load_queue_V_V_0_state[1'd1];

assign p_demorgan9_fu_1090_p2 = (tmp_48_fu_1084_p2 & tmp_47_fu_1078_p2);

assign p_demorgan_fu_821_p2 = (tmp_72_fu_815_p2 & tmp_71_fu_809_p2);

assign p_phi_fu_852_p3 = ((tmp_55_reg_1289_pp0_iter1_reg[0:0] === 1'b1) ? wgt_mem_1_V_Dout_A : wgt_mem_0_V_Dout_A);

assign r_V_1_cast_cast_fu_655_p1 = r_V_1_fu_647_p3;

assign r_V_1_fu_647_p3 = {{dram_idx_assign_1_reg_339}, {5'd0}};

assign r_V_cast_cast_fu_925_p1 = r_V_fu_917_p3;

assign r_V_fu_917_p3 = {{dram_idx_assign_reg_381}, {1'd0}};

assign sram_idx_V_assign_4_fu_1134_p2 = (sram_idx_V_assign_3_reg_1402 + tmp_3_reg_1199);

assign sram_idx_V_assign_6_fu_877_p2 = (tmp_3_reg_1199 + sram_idx_V_assign_s_reg_329);

assign this_assign_3_fu_887_p1 = tmp_65_cast_reg_1194;

assign this_assign_4_cast_fu_540_p1 = tmp_5_fu_536_p1;

assign this_assign_4_fu_560_p1 = tmp_5_reg_1207;

assign tmp22_cast_fu_550_p1 = tmp2_fu_544_p2;

assign tmp2_fu_544_p2 = (this_assign_4_cast_fu_540_p1 + tmp_66_cast_fu_518_p1);

assign tmp_10_fu_614_p2 = ((tmp_6_fu_599_p4 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_110_add_i32_shr_fu_624_p3 = {{tmp_3_reg_1199}, {5'd0}};

assign tmp_110_add_i32_shr_s_fu_631_p1 = tmp_110_add_i32_shr_fu_624_p3;

assign tmp_116_cast_fu_985_p1 = tmp_22_fu_975_p4;

assign tmp_128_cast_fu_827_p1 = tmp_32_reg_1294_pp0_iter1_reg;

assign tmp_14_fu_620_p1 = grp_fu_450_p4;

assign tmp_16_fu_944_p1 = grp_reset_mem_fu_413_ap_return[12:0];

assign tmp_17_fu_948_p3 = {{tmp_16_reg_1413}, {1'd0}};

assign tmp_18_fu_674_p1 = sram_idx_V_assign_s_reg_329[11:0];

assign tmp_19_fu_678_p3 = {{tmp_18_fu_674_p1}, {5'd0}};

assign tmp_1_cast_fu_498_p1 = tmp_1_reg_1156;

assign tmp_20_fu_966_p1 = ap_phi_mux_indvar_phi_fu_406_p4[13:0];

assign tmp_21_fu_970_p2 = (tmp_17_reg_1418 + tmp_20_fu_966_p1);

assign tmp_22_fu_975_p4 = {{tmp_21_fu_970_p2[13:1]}};

assign tmp_23_fu_990_p1 = ap_phi_mux_indvar_phi_fu_406_p4[0:0];

assign tmp_24_fu_994_p3 = {{tmp_23_reg_1437}, {6'd0}};

assign tmp_25_fu_1001_p2 = (tmp_24_fu_994_p3 | 7'd63);

assign tmp_26_fu_1007_p2 = ((tmp_24_fu_994_p3 > tmp_25_fu_1001_p2) ? 1'b1 : 1'b0);

assign tmp_27_fu_1013_p1 = tmp_24_fu_994_p3;

assign tmp_28_fu_1017_p1 = tmp_25_fu_1001_p2;

assign tmp_2_fu_509_p2 = tmp_V_reg_1171 >> 128'd120;

assign tmp_30_fu_1021_p1 = data_port_addr_read_reg_1442;

assign tmp_31_fu_705_p2 = (tmp_54_fu_697_p1 + tmp_19_reg_1275);

assign tmp_34_fu_730_p3 = {{tmp_33_reg_1299}, {6'd0}};

assign tmp_35_fu_737_p2 = (tmp_34_fu_730_p3 | 10'd63);

assign tmp_36_fu_1024_p2 = (tmp_27_fu_1013_p1 ^ 8'd127);

assign tmp_37_fu_1030_p3 = ((tmp_26_fu_1007_p2[0:0] === 1'b1) ? tmp_27_fu_1013_p1 : tmp_28_fu_1017_p1);

assign tmp_38_fu_1038_p3 = ((tmp_26_fu_1007_p2[0:0] === 1'b1) ? tmp_28_fu_1017_p1 : tmp_27_fu_1013_p1);

assign tmp_39_fu_1046_p3 = ((tmp_26_fu_1007_p2[0:0] === 1'b1) ? tmp_36_fu_1024_p2 : tmp_27_fu_1013_p1);

assign tmp_3_fu_522_p4 = {{tmp_V_reg_1171[95:80]}};

assign tmp_40_fu_1054_p2 = (tmp_37_fu_1030_p3 ^ 8'd127);

assign tmp_41_fu_1060_p1 = tmp_39_fu_1046_p3;

assign tmp_42_fu_1064_p1 = tmp_38_fu_1038_p3;

assign tmp_43_fu_1068_p1 = tmp_40_fu_1054_p2;

assign tmp_44_fu_1072_p2 = tmp_30_fu_1021_p1 << tmp_41_fu_1060_p1;

integer ap_tvar_int_0;

always @ (tmp_44_reg_1452) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_45_fu_1096_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_45_fu_1096_p4[ap_tvar_int_0] = tmp_44_reg_1452[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_46_fu_1105_p3 = ((tmp_26_reg_1447[0:0] === 1'b1) ? tmp_45_fu_1096_p4 : tmp_44_reg_1452);

assign tmp_47_fu_1078_p2 = 128'd340282366920938463463374607431768211455 << tmp_42_fu_1064_p1;

assign tmp_48_fu_1084_p2 = 128'd340282366920938463463374607431768211455 >> tmp_43_fu_1068_p1;

assign tmp_49_fu_1111_p2 = (p_demorgan9_reg_1458 ^ 128'd340282366920938463463374607431768211455);

assign tmp_4_fu_531_p2 = tmp_V_reg_1171 >> 128'd124;

assign tmp_50_fu_1116_p2 = (tmp_49_fu_1111_p2 & inp_mem_V_Dout_A);

assign tmp_51_fu_1122_p2 = (tmp_46_fu_1105_p3 & p_demorgan9_reg_1458);

assign tmp_52_fu_1127_p2 = (tmp_51_fu_1122_p2 | tmp_50_fu_1116_p2);

assign tmp_53_fu_1144_p3 = tmp_V_reg_1171[32'd6];

assign tmp_54_fu_697_p1 = ap_phi_mux_indvar2_phi_fu_364_p4[16:0];

assign tmp_55_fu_701_p1 = ap_phi_mux_indvar2_phi_fu_364_p4[0:0];

assign tmp_56_fu_743_p2 = ((tmp_34_fu_730_p3 > tmp_35_fu_737_p2) ? 1'b1 : 1'b0);

assign tmp_57_fu_749_p1 = tmp_34_reg_1309;

assign tmp_58_fu_752_p1 = tmp_35_reg_1314;

assign tmp_59_fu_755_p1 = data_port_addr_1_rea_reg_1304;

assign tmp_5_fu_536_p1 = tmp_4_fu_531_p2[3:0];

assign tmp_60_fu_758_p2 = (tmp_57_fu_749_p1 ^ 11'd1023);

assign tmp_61_fu_764_p3 = ((tmp_56_reg_1319[0:0] === 1'b1) ? tmp_57_fu_749_p1 : tmp_58_fu_752_p1);

assign tmp_62_fu_771_p3 = ((tmp_56_reg_1319[0:0] === 1'b1) ? tmp_58_fu_752_p1 : tmp_57_fu_749_p1);

assign tmp_63_fu_778_p3 = ((tmp_56_reg_1319[0:0] === 1'b1) ? tmp_60_fu_758_p2 : tmp_57_fu_749_p1);

assign tmp_64_fu_785_p2 = (tmp_61_fu_764_p3 ^ 11'd1023);

assign tmp_65_cast_fu_514_p1 = tmp_2_fu_509_p2[3:0];

assign tmp_65_fu_791_p1 = tmp_63_fu_778_p3;

assign tmp_66_cast_fu_518_p1 = tmp_65_cast_fu_514_p1;

assign tmp_66_fu_795_p1 = tmp_62_fu_771_p3;

assign tmp_67_fu_799_p1 = tmp_64_fu_785_p2;

assign tmp_68_fu_803_p2 = tmp_59_fu_755_p1 << tmp_65_fu_791_p1;

integer ap_tvar_int_1;

always @ (tmp_68_reg_1327) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_69_fu_832_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_69_fu_832_p4[ap_tvar_int_1] = tmp_68_reg_1327[1023 - ap_tvar_int_1];
        end
    end
end

assign tmp_6_fu_599_p4 = {{tmp_V_reg_1171[8:7]}};

assign tmp_70_fu_841_p3 = ((tmp_56_reg_1319[0:0] === 1'b1) ? tmp_69_fu_832_p4 : tmp_68_reg_1327);

assign tmp_71_fu_809_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << tmp_66_fu_795_p1;

assign tmp_72_fu_815_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> tmp_67_fu_799_p1;

assign tmp_73_fu_859_p2 = (p_demorgan_reg_1333 ^ 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215);

assign tmp_74_cast_fu_563_p4 = {{tmp_V_reg_1171[115:112]}};

assign tmp_74_fu_864_p2 = (tmp_73_fu_859_p2 & p_phi_fu_852_p3);

assign tmp_75_fu_847_p2 = (tmp_70_fu_841_p3 & p_demorgan_reg_1333);

assign tmp_76_fu_870_p2 = (tmp_75_reg_1349 | tmp_74_fu_864_p2);

assign tmp_78_cast_fu_581_p4 = {{tmp_V_reg_1171[119:116]}};

assign tmp_7_fu_608_p2 = ((tmp_6_fu_599_p4 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_96_add_i32_shr_c_fu_901_p1 = tmp_96_add_i32_shr_fu_894_p3;

assign tmp_96_add_i32_shr_fu_894_p3 = {{tmp_3_reg_1199}, {1'd0}};

assign tmp_cast_fu_495_p1 = tmp_reg_1151;

assign tmp_s_fu_890_p1 = grp_fu_450_p4;

assign weights_V4_sum_cast_fu_664_p1 = weights_V4_sum_reg_1264;

assign weights_V4_sum_fu_659_p2 = (tmp_cast_reg_1161 + r_V_1_cast_cast_fu_655_p1);

assign wgt_mem_0_V_Addr_A = wgt_mem_0_V_Addr_A_orig << 32'd7;

assign wgt_mem_0_V_Clk_A = ap_clk;

assign wgt_mem_0_V_Din_A = tmp_76_fu_870_p2;

assign wgt_mem_0_V_Rst_A = ap_rst_n_inv;

assign wgt_mem_1_V_Addr_A = wgt_mem_1_V_Addr_A_orig << 32'd7;

assign wgt_mem_1_V_Clk_A = ap_clk;

assign wgt_mem_1_V_Din_A = tmp_76_fu_870_p2;

assign wgt_mem_1_V_Rst_A = ap_rst_n_inv;

assign x_width_V_fu_554_p2 = (tmp_3_fu_522_p4 + tmp22_cast_fu_550_p1);

assign y_1_fu_641_p2 = (y_0_i1_reg_349 + 16'd1);

assign y_fu_911_p2 = (y_0_i_reg_391 + 16'd1);

assign y_offset_0_V_fu_576_p1 = y_offset_0_V_fu_576_p10;

assign y_offset_0_V_fu_576_p10 = tmp_74_cast_fu_563_p4;

assign y_offset_1_V_fu_594_p1 = y_offset_1_V_fu_594_p10;

assign y_offset_1_V_fu_594_p10 = tmp_78_cast_fu_581_p4;

always @ (posedge ap_clk) begin
    tmp_cast_reg_1161[37:29] <= 9'b000000000;
    tmp_1_cast_reg_1166[33:29] <= 5'b00000;
    this_assign_4_reg_1218[15:4] <= 12'b000000000000;
    tmp_14_reg_1241[31:16] <= 16'b0000000000000000;
    tmp_110_add_i32_shr_reg_1246[4:0] <= 5'b00000;
    tmp_110_add_i32_shr_s_reg_1251[4:0] <= 5'b00000;
    tmp_110_add_i32_shr_s_reg_1251[31:21] <= 11'b00000000000;
    tmp_19_reg_1275[4:0] <= 5'b00000;
    tmp_34_reg_1309[5:0] <= 6'b000000;
    tmp_35_reg_1314[5:0] <= 6'b111111;
    this_assign_3_reg_1369[15:4] <= 12'b000000000000;
    tmp_s_reg_1374[31:16] <= 16'b0000000000000000;
    tmp_96_add_i32_shr_reg_1379[0] <= 1'b0;
    tmp_96_add_i32_shr_c_reg_1384[0] <= 1'b0;
    tmp_96_add_i32_shr_c_reg_1384[31:17] <= 15'b000000000000000;
    tmp_17_reg_1418[0] <= 1'b0;
end

endmodule //load
