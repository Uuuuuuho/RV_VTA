-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load is
generic (
    C_M_AXI_DATA_PORT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PORT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_DATA_PORT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PORT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PORT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PORT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PORT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data_port_AWVALID : OUT STD_LOGIC;
    m_axi_data_port_AWREADY : IN STD_LOGIC;
    m_axi_data_port_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_data_port_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_port_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_AWUSER_WIDTH-1 downto 0);
    m_axi_data_port_WVALID : OUT STD_LOGIC;
    m_axi_data_port_WREADY : IN STD_LOGIC;
    m_axi_data_port_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH-1 downto 0);
    m_axi_data_port_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH/8-1 downto 0);
    m_axi_data_port_WLAST : OUT STD_LOGIC;
    m_axi_data_port_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_WUSER_WIDTH-1 downto 0);
    m_axi_data_port_ARVALID : OUT STD_LOGIC;
    m_axi_data_port_ARREADY : IN STD_LOGIC;
    m_axi_data_port_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ADDR_WIDTH-1 downto 0);
    m_axi_data_port_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_port_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_port_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_port_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ARUSER_WIDTH-1 downto 0);
    m_axi_data_port_RVALID : IN STD_LOGIC;
    m_axi_data_port_RREADY : OUT STD_LOGIC;
    m_axi_data_port_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_DATA_WIDTH-1 downto 0);
    m_axi_data_port_RLAST : IN STD_LOGIC;
    m_axi_data_port_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_RUSER_WIDTH-1 downto 0);
    m_axi_data_port_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_BVALID : IN STD_LOGIC;
    m_axi_data_port_BREADY : OUT STD_LOGIC;
    m_axi_data_port_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_port_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_ID_WIDTH-1 downto 0);
    m_axi_data_port_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PORT_BUSER_WIDTH-1 downto 0);
    load_queue_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    load_queue_V_V_TVALID : IN STD_LOGIC;
    load_queue_V_V_TREADY : OUT STD_LOGIC;
    g2l_dep_queue_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    g2l_dep_queue_V_TVALID : IN STD_LOGIC;
    g2l_dep_queue_V_TREADY : OUT STD_LOGIC;
    l2g_dep_queue_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    l2g_dep_queue_V_TVALID : OUT STD_LOGIC;
    l2g_dep_queue_V_TREADY : IN STD_LOGIC;
    inp_mem_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inp_mem_V_EN_A : OUT STD_LOGIC;
    inp_mem_V_WEN_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    inp_mem_V_Din_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    inp_mem_V_Dout_A : IN STD_LOGIC_VECTOR (127 downto 0);
    inp_mem_V_Clk_A : OUT STD_LOGIC;
    inp_mem_V_Rst_A : OUT STD_LOGIC;
    wgt_mem_0_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    wgt_mem_0_V_EN_A : OUT STD_LOGIC;
    wgt_mem_0_V_WEN_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    wgt_mem_0_V_Din_A : OUT STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_0_V_Dout_A : IN STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_0_V_Clk_A : OUT STD_LOGIC;
    wgt_mem_0_V_Rst_A : OUT STD_LOGIC;
    wgt_mem_1_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    wgt_mem_1_V_EN_A : OUT STD_LOGIC;
    wgt_mem_1_V_WEN_A : OUT STD_LOGIC_VECTOR (127 downto 0);
    wgt_mem_1_V_Din_A : OUT STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_1_V_Dout_A : IN STD_LOGIC_VECTOR (1023 downto 0);
    wgt_mem_1_V_Clk_A : OUT STD_LOGIC;
    wgt_mem_1_V_Rst_A : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of load is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "load,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.275000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=5439,HLS_SYN_LUT=18518}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv128_lc_5 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111100";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3F : STD_LOGIC_VECTOR (9 downto 0) := "0000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv1024_lc_6 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputs_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_V : STD_LOGIC_VECTOR (31 downto 0);
    signal load_queue_V_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal load_queue_V_V_0_vld_in : STD_LOGIC;
    signal load_queue_V_V_0_vld_out : STD_LOGIC;
    signal load_queue_V_V_0_ack_in : STD_LOGIC;
    signal load_queue_V_V_0_ack_out : STD_LOGIC;
    signal load_queue_V_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal load_queue_V_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal load_queue_V_V_0_sel_rd : STD_LOGIC := '0';
    signal load_queue_V_V_0_sel_wr : STD_LOGIC := '0';
    signal load_queue_V_V_0_sel : STD_LOGIC;
    signal load_queue_V_V_0_load_A : STD_LOGIC;
    signal load_queue_V_V_0_load_B : STD_LOGIC;
    signal load_queue_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal load_queue_V_V_0_state_cmp_full : STD_LOGIC;
    signal g2l_dep_queue_V_0_vld_in : STD_LOGIC;
    signal g2l_dep_queue_V_0_vld_out : STD_LOGIC;
    signal g2l_dep_queue_V_0_ack_out : STD_LOGIC;
    signal g2l_dep_queue_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal l2g_dep_queue_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal l2g_dep_queue_V_1_vld_in : STD_LOGIC;
    signal l2g_dep_queue_V_1_vld_out : STD_LOGIC;
    signal l2g_dep_queue_V_1_ack_in : STD_LOGIC;
    signal l2g_dep_queue_V_1_ack_out : STD_LOGIC;
    signal l2g_dep_queue_V_1_sel_rd : STD_LOGIC := '0';
    signal l2g_dep_queue_V_1_sel : STD_LOGIC;
    signal l2g_dep_queue_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_port_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal data_port_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal exitcond_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond1_reg_1280 : STD_LOGIC_VECTOR (0 downto 0);
    signal load_queue_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal g2l_dep_queue_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_11_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal l2g_dep_queue_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_53_fu_1144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_53_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_AWREADY : STD_LOGIC;
    signal data_port_WREADY : STD_LOGIC;
    signal data_port_ARVALID : STD_LOGIC;
    signal data_port_ARREADY : STD_LOGIC;
    signal data_port_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal data_port_RVALID : STD_LOGIC;
    signal data_port_RREADY : STD_LOGIC;
    signal data_port_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal data_port_RLAST : STD_LOGIC;
    signal data_port_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_port_BVALID : STD_LOGIC;
    signal data_port_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data_port_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar2_reg_360 : STD_LOGIC_VECTOR (20 downto 0);
    signal indvar_reg_402 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_459 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_reset_mem_fu_413_ap_idle : STD_LOGIC;
    signal grp_reset_mem_fu_413_ap_ready : STD_LOGIC;
    signal grp_reset_mem_fu_413_ap_done : STD_LOGIC;
    signal reg_471 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1151 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_1_reg_1156 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_cast_fu_495_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_cast_reg_1161 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_1_cast_fu_498_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_1_cast_reg_1166 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_V_reg_1171 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_2_fu_509_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_65_cast_fu_514_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_cast_reg_1194 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_522_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1199 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_536_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_1207 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_width_V_fu_554_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_width_V_reg_1212 : STD_LOGIC_VECTOR (15 downto 0);
    signal this_assign_4_fu_560_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal this_assign_4_reg_1218 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_0_V_fu_576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_0_V_reg_1223 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_1_V_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_1_V_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_add_i32_shr_fu_624_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_110_add_i32_shr_reg_1246 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_110_add_i32_shr_s_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_add_i32_shr_s_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_641_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_reg_1259 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal weights_V4_sum_fu_659_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal weights_V4_sum_reg_1264 : STD_LOGIC_VECTOR (37 downto 0);
    signal exitcond_i1_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_data_port_ARREADY : STD_LOGIC;
    signal tmp_19_fu_678_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_reg_1275 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond1_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_next1_fu_691_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal indvar_next1_reg_1284 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_55_fu_701_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_1289_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1294 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_reg_1294_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_reg_1299 : STD_LOGIC_VECTOR (3 downto 0);
    signal data_port_addr_1_rea_reg_1304 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state14_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_34_fu_730_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_reg_1309 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_fu_737_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_reg_1314 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_803_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_68_reg_1327 : STD_LOGIC_VECTOR (1023 downto 0);
    signal p_demorgan_fu_821_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal p_demorgan_reg_1333 : STD_LOGIC_VECTOR (1023 downto 0);
    signal wgt_mem_0_V_addr_reg_1339 : STD_LOGIC_VECTOR (9 downto 0);
    signal wgt_mem_1_V_addr_reg_1344 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_75_fu_847_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_75_reg_1349 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sram_idx_V_assign_6_fu_877_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal dram_idx_V_assign_3_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_mem_fu_413_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal this_assign_3_fu_887_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal this_assign_3_reg_1369 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_add_i32_shr_fu_894_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_96_add_i32_shr_reg_1379 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_96_add_i32_shr_c_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_add_i32_shr_c_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_911_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_reg_1392 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal inputs_V2_sum_fu_929_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal inputs_V2_sum_reg_1397 : STD_LOGIC_VECTOR (33 downto 0);
    signal exitcond_i_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sram_idx_V_assign_3_reg_1402 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_944_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_reg_1413 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_fu_948_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_reg_1418 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal exitcond_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state29_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond_reg_1423_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_960_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_next_reg_1427 : STD_LOGIC_VECTOR (16 downto 0);
    signal inp_mem_V_addr_reg_1432 : STD_LOGIC_VECTOR (10 downto 0);
    signal inp_mem_V_addr_reg_1432_pp1_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_990_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_1437 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_port_addr_read_reg_1442 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state30_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state32_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_26_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1447 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1072_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_44_reg_1452 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan9_fu_1090_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan9_reg_1458 : STD_LOGIC_VECTOR (127 downto 0);
    signal sram_idx_V_assign_4_fu_1134_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sram_idx_V_assign_4_reg_1464 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal dram_idx_V_assign_2_fu_1139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dram_idx_V_assign_2_reg_1469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_state35_on_subcall_done : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal grp_reset_mem_fu_413_ap_start : STD_LOGIC;
    signal grp_reset_mem_fu_413_sram_idx_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_fu_413_range_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_fu_413_mem_V_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_mem_fu_413_mem_V_EN_A : STD_LOGIC;
    signal grp_reset_mem_fu_413_mem_V_WEN_A : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_mem_fu_413_mem_V_Din_A : STD_LOGIC_VECTOR (127 downto 0);
    signal sram_idx_V_assign_s_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal dram_idx_assign_1_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_i1_reg_349 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_indvar2_phi_fu_364_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sram_idx_V_assign2_reg_371 : STD_LOGIC_VECTOR (15 downto 0);
    signal dram_idx_assign_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_i_reg_391 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_indvar_phi_fu_406_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_reset_mem_fu_413_ap_start_reg : STD_LOGIC := '0';
    signal tmp_128_cast_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_cast_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_V4_sum_cast_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inputs_V2_sum_cast_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_data_port_ARREADY : STD_LOGIC := '0';
    signal ap_block_state36_io : BOOLEAN;
    signal wgt_mem_1_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_870_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal wgt_mem_0_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inp_mem_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1127_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_4_fu_531_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal this_assign_4_cast_fu_540_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_cast_fu_518_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_544_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp22_cast_fu_550_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_cast_fu_563_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_offset_0_V_fu_576_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_78_cast_fu_581_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_offset_1_V_fu_594_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_599_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_450_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_647_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal r_V_1_cast_cast_fu_655_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_18_fu_674_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_fu_697_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_31_fu_705_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_57_fu_749_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_58_fu_752_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_60_fu_758_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_764_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_63_fu_778_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_771_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_fu_785_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_755_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_65_fu_791_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_66_fu_795_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_67_fu_799_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_71_fu_809_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_72_fu_815_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_69_fu_832_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_70_fu_841_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal p_phi_fu_852_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_73_fu_859_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_74_fu_864_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal r_V_fu_917_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_cast_cast_fu_925_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_20_fu_966_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_fu_970_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_975_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_994_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_1001_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_1013_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_1024_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_1030_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_1046_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1038_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1054_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_1021_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_41_fu_1060_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_42_fu_1064_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_43_fu_1068_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_47_fu_1078_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_48_fu_1084_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_45_fu_1096_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_49_fu_1111_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_46_fu_1105_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_50_fu_1116_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_51_fu_1122_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal y_offset_0_V_fu_576_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_offset_1_V_fu_594_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component reset_mem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sram_idx_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        range_V : IN STD_LOGIC_VECTOR (15 downto 0);
        mem_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        mem_V_EN_A : OUT STD_LOGIC;
        mem_V_WEN_A : OUT STD_LOGIC_VECTOR (15 downto 0);
        mem_V_Din_A : OUT STD_LOGIC_VECTOR (127 downto 0);
        mem_V_Dout_A : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component load_mul_16s_4ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component load_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputs_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component load_data_port_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    load_CONTROL_BUS_s_axi_U : component load_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputs_V => inputs_V,
        weights_V => weights_V);

    load_data_port_m_axi_U : component load_data_port_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_PORT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_PORT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_PORT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_PORT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_PORT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_PORT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_PORT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_PORT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_PORT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PORT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_PORT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data_port_AWVALID,
        AWREADY => m_axi_data_port_AWREADY,
        AWADDR => m_axi_data_port_AWADDR,
        AWID => m_axi_data_port_AWID,
        AWLEN => m_axi_data_port_AWLEN,
        AWSIZE => m_axi_data_port_AWSIZE,
        AWBURST => m_axi_data_port_AWBURST,
        AWLOCK => m_axi_data_port_AWLOCK,
        AWCACHE => m_axi_data_port_AWCACHE,
        AWPROT => m_axi_data_port_AWPROT,
        AWQOS => m_axi_data_port_AWQOS,
        AWREGION => m_axi_data_port_AWREGION,
        AWUSER => m_axi_data_port_AWUSER,
        WVALID => m_axi_data_port_WVALID,
        WREADY => m_axi_data_port_WREADY,
        WDATA => m_axi_data_port_WDATA,
        WSTRB => m_axi_data_port_WSTRB,
        WLAST => m_axi_data_port_WLAST,
        WID => m_axi_data_port_WID,
        WUSER => m_axi_data_port_WUSER,
        ARVALID => m_axi_data_port_ARVALID,
        ARREADY => m_axi_data_port_ARREADY,
        ARADDR => m_axi_data_port_ARADDR,
        ARID => m_axi_data_port_ARID,
        ARLEN => m_axi_data_port_ARLEN,
        ARSIZE => m_axi_data_port_ARSIZE,
        ARBURST => m_axi_data_port_ARBURST,
        ARLOCK => m_axi_data_port_ARLOCK,
        ARCACHE => m_axi_data_port_ARCACHE,
        ARPROT => m_axi_data_port_ARPROT,
        ARQOS => m_axi_data_port_ARQOS,
        ARREGION => m_axi_data_port_ARREGION,
        ARUSER => m_axi_data_port_ARUSER,
        RVALID => m_axi_data_port_RVALID,
        RREADY => m_axi_data_port_RREADY,
        RDATA => m_axi_data_port_RDATA,
        RLAST => m_axi_data_port_RLAST,
        RID => m_axi_data_port_RID,
        RUSER => m_axi_data_port_RUSER,
        RRESP => m_axi_data_port_RRESP,
        BVALID => m_axi_data_port_BVALID,
        BREADY => m_axi_data_port_BREADY,
        BRESP => m_axi_data_port_BRESP,
        BID => m_axi_data_port_BID,
        BUSER => m_axi_data_port_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data_port_ARVALID,
        I_ARREADY => data_port_ARREADY,
        I_ARADDR => data_port_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => data_port_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data_port_RVALID,
        I_RREADY => data_port_RREADY,
        I_RDATA => data_port_RDATA,
        I_RID => data_port_RID,
        I_RUSER => data_port_RUSER,
        I_RRESP => data_port_RRESP,
        I_RLAST => data_port_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data_port_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data_port_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => data_port_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data_port_BRESP,
        I_BID => data_port_BID,
        I_BUSER => data_port_BUSER);

    grp_reset_mem_fu_413 : component reset_mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_reset_mem_fu_413_ap_start,
        ap_done => grp_reset_mem_fu_413_ap_done,
        ap_idle => grp_reset_mem_fu_413_ap_idle,
        ap_ready => grp_reset_mem_fu_413_ap_ready,
        sram_idx_V_read => grp_reset_mem_fu_413_sram_idx_V_read,
        range_V => grp_reset_mem_fu_413_range_V,
        mem_V_Addr_A => grp_reset_mem_fu_413_mem_V_Addr_A,
        mem_V_EN_A => grp_reset_mem_fu_413_mem_V_EN_A,
        mem_V_WEN_A => grp_reset_mem_fu_413_mem_V_WEN_A,
        mem_V_Din_A => grp_reset_mem_fu_413_mem_V_Din_A,
        mem_V_Dout_A => ap_const_lv128_lc_1,
        ap_return => grp_reset_mem_fu_413_ap_return);

    load_mul_16s_4ns_bkb_U3 : component load_mul_16s_4ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => x_width_V_reg_1212,
        din1 => y_offset_0_V_fu_576_p1,
        dout => y_offset_0_V_fu_576_p2);

    load_mul_16s_4ns_bkb_U4 : component load_mul_16s_4ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => x_width_V_reg_1212,
        din1 => y_offset_1_V_fu_594_p1,
        dout => y_offset_1_V_fu_594_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state29);
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_data_port_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_data_port_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_sig_ioackin_data_port_ARREADY = ap_const_logic_0) or (grp_reset_mem_fu_413_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
                    ap_reg_ioackin_data_port_ARREADY <= ap_const_logic_0;
                elsif ((((data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
                    ap_reg_ioackin_data_port_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    g2l_dep_queue_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                g2l_dep_queue_V_0_state <= ap_const_lv2_0;
            else
                if ((((g2l_dep_queue_V_0_vld_in = ap_const_logic_0) and (g2l_dep_queue_V_0_state = ap_const_lv2_2)) or ((g2l_dep_queue_V_0_vld_in = ap_const_logic_0) and (g2l_dep_queue_V_0_ack_out = ap_const_logic_1) and (g2l_dep_queue_V_0_state = ap_const_lv2_3)))) then 
                    g2l_dep_queue_V_0_state <= ap_const_lv2_2;
                elsif ((((g2l_dep_queue_V_0_ack_out = ap_const_logic_0) and (g2l_dep_queue_V_0_state = ap_const_lv2_1)) or ((g2l_dep_queue_V_0_ack_out = ap_const_logic_0) and (g2l_dep_queue_V_0_vld_in = ap_const_logic_1) and (g2l_dep_queue_V_0_state = ap_const_lv2_3)))) then 
                    g2l_dep_queue_V_0_state <= ap_const_lv2_1;
                elsif (((not(((g2l_dep_queue_V_0_vld_in = ap_const_logic_0) and (g2l_dep_queue_V_0_ack_out = ap_const_logic_1))) and not(((g2l_dep_queue_V_0_ack_out = ap_const_logic_0) and (g2l_dep_queue_V_0_vld_in = ap_const_logic_1))) and (g2l_dep_queue_V_0_state = ap_const_lv2_3)) or ((g2l_dep_queue_V_0_ack_out = ap_const_logic_1) and (g2l_dep_queue_V_0_state = ap_const_lv2_1)) or ((g2l_dep_queue_V_0_vld_in = ap_const_logic_1) and (g2l_dep_queue_V_0_state = ap_const_lv2_2)))) then 
                    g2l_dep_queue_V_0_state <= ap_const_lv2_3;
                else 
                    g2l_dep_queue_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_reset_mem_fu_413_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_reset_mem_fu_413_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_905_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_905_p2 = ap_const_lv1_0)))) then 
                    grp_reset_mem_fu_413_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reset_mem_fu_413_ap_ready = ap_const_logic_1)) then 
                    grp_reset_mem_fu_413_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    l2g_dep_queue_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                l2g_dep_queue_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((l2g_dep_queue_V_1_ack_out = ap_const_logic_1) and (l2g_dep_queue_V_1_vld_out = ap_const_logic_1))) then 
                                        l2g_dep_queue_V_1_sel_rd <= not(l2g_dep_queue_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    l2g_dep_queue_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                l2g_dep_queue_V_1_state <= ap_const_lv2_0;
            else
                if ((((l2g_dep_queue_V_1_vld_in = ap_const_logic_0) and (l2g_dep_queue_V_1_state = ap_const_lv2_2)) or ((l2g_dep_queue_V_1_vld_in = ap_const_logic_0) and (l2g_dep_queue_V_1_ack_out = ap_const_logic_1) and (l2g_dep_queue_V_1_state = ap_const_lv2_3)))) then 
                    l2g_dep_queue_V_1_state <= ap_const_lv2_2;
                elsif ((((l2g_dep_queue_V_1_ack_out = ap_const_logic_0) and (l2g_dep_queue_V_1_state = ap_const_lv2_1)) or ((l2g_dep_queue_V_1_ack_out = ap_const_logic_0) and (l2g_dep_queue_V_1_vld_in = ap_const_logic_1) and (l2g_dep_queue_V_1_state = ap_const_lv2_3)))) then 
                    l2g_dep_queue_V_1_state <= ap_const_lv2_1;
                elsif (((not(((l2g_dep_queue_V_1_vld_in = ap_const_logic_0) and (l2g_dep_queue_V_1_ack_out = ap_const_logic_1))) and not(((l2g_dep_queue_V_1_ack_out = ap_const_logic_0) and (l2g_dep_queue_V_1_vld_in = ap_const_logic_1))) and (l2g_dep_queue_V_1_state = ap_const_lv2_3)) or ((l2g_dep_queue_V_1_ack_out = ap_const_logic_1) and (l2g_dep_queue_V_1_state = ap_const_lv2_1)) or ((l2g_dep_queue_V_1_vld_in = ap_const_logic_1) and (l2g_dep_queue_V_1_state = ap_const_lv2_2)))) then 
                    l2g_dep_queue_V_1_state <= ap_const_lv2_3;
                else 
                    l2g_dep_queue_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    load_queue_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                load_queue_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((load_queue_V_V_0_ack_out = ap_const_logic_1) and (load_queue_V_V_0_vld_out = ap_const_logic_1))) then 
                                        load_queue_V_V_0_sel_rd <= not(load_queue_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    load_queue_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                load_queue_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((load_queue_V_V_0_ack_in = ap_const_logic_1) and (load_queue_V_V_0_vld_in = ap_const_logic_1))) then 
                                        load_queue_V_V_0_sel_wr <= not(load_queue_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    load_queue_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                load_queue_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((load_queue_V_V_0_vld_in = ap_const_logic_0) and (load_queue_V_V_0_state = ap_const_lv2_2)) or ((load_queue_V_V_0_vld_in = ap_const_logic_0) and (load_queue_V_V_0_ack_out = ap_const_logic_1) and (load_queue_V_V_0_state = ap_const_lv2_3)))) then 
                    load_queue_V_V_0_state <= ap_const_lv2_2;
                elsif ((((load_queue_V_V_0_ack_out = ap_const_logic_0) and (load_queue_V_V_0_state = ap_const_lv2_1)) or ((load_queue_V_V_0_ack_out = ap_const_logic_0) and (load_queue_V_V_0_vld_in = ap_const_logic_1) and (load_queue_V_V_0_state = ap_const_lv2_3)))) then 
                    load_queue_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((load_queue_V_V_0_vld_in = ap_const_logic_0) and (load_queue_V_V_0_ack_out = ap_const_logic_1))) and not(((load_queue_V_V_0_ack_out = ap_const_logic_0) and (load_queue_V_V_0_vld_in = ap_const_logic_1))) and (load_queue_V_V_0_state = ap_const_lv2_3)) or ((load_queue_V_V_0_ack_out = ap_const_logic_1) and (load_queue_V_V_0_state = ap_const_lv2_1)) or ((load_queue_V_V_0_vld_in = ap_const_logic_1) and (load_queue_V_V_0_state = ap_const_lv2_2)))) then 
                    load_queue_V_V_0_state <= ap_const_lv2_3;
                else 
                    load_queue_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dram_idx_assign_1_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                dram_idx_assign_1_reg_339 <= dram_idx_V_assign_3_fu_882_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_10_fu_614_p2 = ap_const_lv1_1) and (tmp_7_fu_608_p2 = ap_const_lv1_0))) then 
                dram_idx_assign_1_reg_339 <= tmp_V_reg_1171(56 downto 25);
            end if; 
        end if;
    end process;

    dram_idx_assign_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_reset_mem_fu_413_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    dram_idx_assign_reg_381 <= dram_idx_V_assign_2_reg_1469;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    dram_idx_assign_reg_381 <= tmp_V_reg_1171(56 downto 25);
                end if;
            end if; 
        end if;
    end process;

    indvar2_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_1280 = ap_const_lv1_0))) then 
                indvar2_reg_360 <= indvar_next1_reg_1284;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar2_reg_360 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    indvar_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1423 = ap_const_lv1_0))) then 
                indvar_reg_402 <= indvar_next_reg_1427;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                indvar_reg_402 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    sram_idx_V_assign_s_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sram_idx_V_assign_s_reg_329 <= sram_idx_V_assign_6_fu_877_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_10_fu_614_p2 = ap_const_lv1_1) and (tmp_7_fu_608_p2 = ap_const_lv1_0))) then 
                sram_idx_V_assign_s_reg_329 <= tmp_V_reg_1171(24 downto 9);
            end if; 
        end if;
    end process;

    y_0_i1_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                y_0_i1_reg_349 <= y_1_reg_1259;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_10_fu_614_p2 = ap_const_lv1_1) and (tmp_7_fu_608_p2 = ap_const_lv1_0))) then 
                y_0_i1_reg_349 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_reset_mem_fu_413_ap_done = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    y_0_i_reg_391 <= y_reg_1392;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    y_0_i_reg_391 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond1_reg_1280 = ap_const_lv1_0))) then
                data_port_addr_1_rea_reg_1304 <= data_port_RDATA;
                    tmp_34_reg_1309(9 downto 6) <= tmp_34_fu_730_p3(9 downto 6);
                    tmp_35_reg_1314(9 downto 6) <= tmp_35_fu_737_p2(9 downto 6);
                tmp_56_reg_1319 <= tmp_56_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1423 = ap_const_lv1_0))) then
                data_port_addr_read_reg_1442 <= data_port_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                dram_idx_V_assign_2_reg_1469 <= dram_idx_V_assign_2_fu_1139_p2;
                sram_idx_V_assign_4_reg_1464 <= sram_idx_V_assign_4_fu_1134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_1280 <= exitcond1_fu_686_p2;
                p_demorgan_reg_1333 <= p_demorgan_fu_821_p2;
                tmp_32_reg_1294_pp0_iter1_reg <= tmp_32_reg_1294;
                tmp_55_reg_1289_pp0_iter1_reg <= tmp_55_reg_1289;
                tmp_68_reg_1327 <= tmp_68_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_reg_1423 <= exitcond_fu_955_p2;
                exitcond_reg_1423_pp1_iter1_reg <= exitcond_reg_1423;
                inp_mem_V_addr_reg_1432_pp1_iter1_reg <= inp_mem_V_addr_reg_1432;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_next1_reg_1284 <= indvar_next1_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                indvar_next_reg_1427 <= indvar_next_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_955_p2 = ap_const_lv1_0))) then
                inp_mem_V_addr_reg_1432 <= tmp_116_cast_fu_985_p1(11 - 1 downto 0);
                tmp_23_reg_1437 <= tmp_23_fu_990_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_905_p2 = ap_const_lv1_0))) then
                inputs_V2_sum_reg_1397 <= inputs_V2_sum_fu_929_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((load_queue_V_V_0_load_A = ap_const_logic_1)) then
                load_queue_V_V_0_payload_A <= load_queue_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((load_queue_V_V_0_load_B = ap_const_logic_1)) then
                load_queue_V_V_0_payload_B <= load_queue_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1423 = ap_const_lv1_0))) then
                p_demorgan9_reg_1458 <= p_demorgan9_fu_1090_p2;
                tmp_26_reg_1447 <= tmp_26_fu_1007_p2;
                tmp_44_reg_1452 <= tmp_44_fu_1072_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_10_fu_614_p2 = ap_const_lv1_1) and (tmp_7_fu_608_p2 = ap_const_lv1_0)))) then
                reg_459 <= tmp_V_reg_1171(24 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_10_fu_614_p2 = ap_const_lv1_1) and (tmp_7_fu_608_p2 = ap_const_lv1_0)))) then
                reg_471 <= tmp_V_reg_1171(79 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then
                sram_idx_V_assign2_reg_371 <= grp_reset_mem_fu_413_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_data_port_ARREADY = ap_const_logic_0) or (grp_reset_mem_fu_413_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                sram_idx_V_assign_3_reg_1402 <= grp_reset_mem_fu_413_ap_return;
                tmp_16_reg_1413 <= tmp_16_fu_944_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    this_assign_3_reg_1369(3 downto 0) <= this_assign_3_fu_887_p1(3 downto 0);
                    tmp_96_add_i32_shr_c_reg_1384(16 downto 1) <= tmp_96_add_i32_shr_c_fu_901_p1(16 downto 1);
                    tmp_96_add_i32_shr_reg_1379(16 downto 1) <= tmp_96_add_i32_shr_fu_894_p3(16 downto 1);
                    tmp_s_reg_1374(15 downto 0) <= tmp_s_fu_890_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    this_assign_4_reg_1218(3 downto 0) <= this_assign_4_fu_560_p1(3 downto 0);
                tmp_7_reg_1233 <= tmp_7_fu_608_p2;
                y_offset_0_V_reg_1223 <= y_offset_0_V_fu_576_p2;
                y_offset_1_V_reg_1228 <= y_offset_1_V_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_608_p2 = ap_const_lv1_0))) then
                tmp_10_reg_1237 <= tmp_10_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_10_fu_614_p2 = ap_const_lv1_1) and (tmp_7_fu_608_p2 = ap_const_lv1_0))) then
                    tmp_110_add_i32_shr_reg_1246(20 downto 5) <= tmp_110_add_i32_shr_fu_624_p3(20 downto 5);
                    tmp_110_add_i32_shr_s_reg_1251(20 downto 5) <= tmp_110_add_i32_shr_s_fu_631_p1(20 downto 5);
                    tmp_14_reg_1241(15 downto 0) <= tmp_14_fu_620_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (load_queue_V_V_0_vld_out = ap_const_logic_1))) then
                tmp_11_reg_1186 <= load_queue_V_V_0_data_out(4 downto 4);
                    tmp_1_cast_reg_1166(28 downto 0) <= tmp_1_cast_fu_498_p1(28 downto 0);
                tmp_V_reg_1171 <= load_queue_V_V_0_data_out;
                    tmp_cast_reg_1161(28 downto 0) <= tmp_cast_fu_495_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    tmp_17_reg_1418(13 downto 1) <= tmp_17_fu_948_p3(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    tmp_19_reg_1275(16 downto 5) <= tmp_19_fu_678_p3(16 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_reg_1156 <= inputs_V(31 downto 3);
                tmp_reg_1151 <= weights_V(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_fu_686_p2 = ap_const_lv1_0))) then
                tmp_32_reg_1294 <= tmp_31_fu_705_p2(16 downto 5);
                tmp_33_reg_1299 <= ap_phi_mux_indvar2_phi_fu_364_p4(4 downto 1);
                tmp_55_reg_1289 <= tmp_55_fu_701_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((g2l_dep_queue_V_0_vld_out = ap_const_logic_0) and (tmp_11_reg_1186 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_3_reg_1199 <= tmp_V_reg_1171(95 downto 80);
                tmp_5_reg_1207 <= tmp_5_fu_536_p1;
                tmp_65_cast_reg_1194 <= tmp_65_cast_fu_514_p1;
                x_width_V_reg_1212 <= x_width_V_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state35_on_subcall_done) or (ap_const_boolean_1 = ap_block_state35_io))) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                tmp_53_reg_1479 <= tmp_V_reg_1171(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_75_reg_1349 <= tmp_75_fu_847_p2;
                wgt_mem_0_V_addr_reg_1339 <= tmp_128_cast_fu_827_p1(10 - 1 downto 0);
                wgt_mem_1_V_addr_reg_1344 <= tmp_128_cast_fu_827_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_10_reg_1237 = ap_const_lv1_1) and (exitcond_i1_fu_635_p2 = ap_const_lv1_0))) then
                weights_V4_sum_reg_1264 <= weights_V4_sum_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_10_reg_1237 = ap_const_lv1_1))) then
                y_1_reg_1259 <= y_1_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                y_reg_1392 <= y_fu_911_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_1161(37 downto 29) <= "000000000";
    tmp_1_cast_reg_1166(33 downto 29) <= "00000";
    this_assign_4_reg_1218(15 downto 4) <= "000000000000";
    tmp_14_reg_1241(31 downto 16) <= "0000000000000000";
    tmp_110_add_i32_shr_reg_1246(4 downto 0) <= "00000";
    tmp_110_add_i32_shr_s_reg_1251(4 downto 0) <= "00000";
    tmp_110_add_i32_shr_s_reg_1251(31 downto 21) <= "00000000000";
    tmp_19_reg_1275(4 downto 0) <= "00000";
    tmp_34_reg_1309(5 downto 0) <= "000000";
    tmp_35_reg_1314(5 downto 0) <= "111111";
    this_assign_3_reg_1369(15 downto 4) <= "000000000000";
    tmp_s_reg_1374(31 downto 16) <= "0000000000000000";
    tmp_96_add_i32_shr_reg_1379(0) <= '0';
    tmp_96_add_i32_shr_c_reg_1384(0) <= '0';
    tmp_96_add_i32_shr_c_reg_1384(31 downto 17) <= "000000000000000";
    tmp_17_reg_1418(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, load_queue_V_V_0_vld_out, g2l_dep_queue_V_0_vld_out, l2g_dep_queue_V_1_ack_in, ap_CS_fsm_state22, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state6, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_11_reg_1186, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state4, tmp_7_fu_608_p2, ap_CS_fsm_state20, grp_reset_mem_fu_413_ap_done, tmp_10_reg_1237, ap_CS_fsm_state5, exitcond_i1_fu_635_p2, ap_sig_ioackin_data_port_ARREADY, exitcond1_fu_686_p2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state21, exitcond_i_fu_905_p2, exitcond_fu_955_p2, ap_CS_fsm_state34, ap_block_state35_io, ap_block_state35_on_subcall_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone, ap_block_state36_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (load_queue_V_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((g2l_dep_queue_V_0_vld_out = ap_const_logic_0) and (tmp_11_reg_1186 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_608_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((exitcond_i1_fu_635_p2 = ap_const_lv1_1) or (tmp_10_reg_1237 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_sig_ioackin_data_port_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_686_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_686_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_905_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((ap_sig_ioackin_data_port_ARREADY = ap_const_logic_0) or (grp_reset_mem_fu_413_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_955_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_fu_955_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if ((not(((ap_const_boolean_1 = ap_block_state35_on_subcall_done) or (ap_const_boolean_1 = ap_block_state35_io))) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if ((not(((ap_const_boolean_1 = ap_block_state36_io) or (l2g_dep_queue_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(26);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state35 <= ap_CS_fsm(29);
    ap_CS_fsm_state36 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_1280, data_port_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_1280 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond1_reg_1280, data_port_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_1280 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond_reg_1423, data_port_RVALID)
    begin
                ap_block_pp1_stage1_11001 <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_reg_1423 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, exitcond_reg_1423, data_port_RVALID)
    begin
                ap_block_pp1_stage1_subdone <= ((data_port_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_reg_1423 = ap_const_lv1_0));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage1_iter0_assign_proc : process(exitcond1_reg_1280, data_port_RVALID)
    begin
                ap_block_state14_pp0_stage1_iter0 <= ((data_port_RVALID = ap_const_logic_0) and (exitcond1_reg_1280 = ap_const_lv1_0));
    end process;

        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(g2l_dep_queue_V_0_vld_out, tmp_11_reg_1186)
    begin
                ap_block_state3 <= ((g2l_dep_queue_V_0_vld_out = ap_const_logic_0) and (tmp_11_reg_1186 = ap_const_lv1_1));
    end process;


    ap_block_state30_pp1_stage1_iter0_assign_proc : process(exitcond_reg_1423, data_port_RVALID)
    begin
                ap_block_state30_pp1_stage1_iter0 <= ((data_port_RVALID = ap_const_logic_0) and (exitcond_reg_1423 = ap_const_lv1_0));
    end process;

        ap_block_state31_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(l2g_dep_queue_V_1_ack_in, tmp_53_fu_1144_p3)
    begin
                ap_block_state35_io <= ((l2g_dep_queue_V_1_ack_in = ap_const_logic_0) and (tmp_53_fu_1144_p3 = ap_const_lv1_1));
    end process;


    ap_block_state35_on_subcall_done_assign_proc : process(grp_reset_mem_fu_413_ap_done, tmp_7_reg_1233)
    begin
                ap_block_state35_on_subcall_done <= ((grp_reset_mem_fu_413_ap_done = ap_const_logic_0) and (tmp_7_reg_1233 = ap_const_lv1_1));
    end process;


    ap_block_state36_io_assign_proc : process(l2g_dep_queue_V_1_ack_in, tmp_53_reg_1479)
    begin
                ap_block_state36_io <= ((l2g_dep_queue_V_1_ack_in = ap_const_logic_0) and (tmp_53_reg_1479 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(exitcond1_fu_686_p2)
    begin
        if ((exitcond1_fu_686_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state29_assign_proc : process(exitcond_fu_955_p2)
    begin
        if ((exitcond_fu_955_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(l2g_dep_queue_V_1_ack_in, ap_CS_fsm_state36, ap_block_state36_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state36_io) or (l2g_dep_queue_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar2_phi_fu_364_p4_assign_proc : process(exitcond1_reg_1280, indvar2_reg_360, ap_CS_fsm_pp0_stage0, indvar_next1_reg_1284, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_1280 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar2_phi_fu_364_p4 <= indvar_next1_reg_1284;
        else 
            ap_phi_mux_indvar2_phi_fu_364_p4 <= indvar2_reg_360;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_406_p4_assign_proc : process(exitcond_reg_1423, indvar_reg_402, ap_CS_fsm_pp1_stage0, indvar_next_reg_1427, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1423 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_phi_fu_406_p4 <= indvar_next_reg_1427;
        else 
            ap_phi_mux_indvar_phi_fu_406_p4 <= indvar_reg_402;
        end if; 
    end process;


    ap_ready_assign_proc : process(l2g_dep_queue_V_1_ack_in, ap_CS_fsm_state36, ap_block_state36_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state36_io) or (l2g_dep_queue_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_data_port_ARREADY_assign_proc : process(data_port_ARREADY, ap_reg_ioackin_data_port_ARREADY)
    begin
        if ((ap_reg_ioackin_data_port_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_data_port_ARREADY <= data_port_ARREADY;
        else 
            ap_sig_ioackin_data_port_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_port_ARADDR_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state6, grp_reset_mem_fu_413_ap_done, weights_V4_sum_cast_fu_664_p1, inputs_V2_sum_cast_fu_934_p1, ap_reg_ioackin_data_port_ARREADY)
    begin
        if ((ap_reg_ioackin_data_port_ARREADY = ap_const_logic_0)) then
            if (((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                data_port_ARADDR <= inputs_V2_sum_cast_fu_934_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                data_port_ARADDR <= weights_V4_sum_cast_fu_664_p1(32 - 1 downto 0);
            else 
                data_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_port_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_port_ARLEN_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state6, grp_reset_mem_fu_413_ap_done, tmp_110_add_i32_shr_s_reg_1251, tmp_96_add_i32_shr_c_reg_1384, ap_reg_ioackin_data_port_ARREADY)
    begin
        if ((ap_reg_ioackin_data_port_ARREADY = ap_const_logic_0)) then
            if (((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                data_port_ARLEN <= tmp_96_add_i32_shr_c_reg_1384;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                data_port_ARLEN <= tmp_110_add_i32_shr_s_reg_1251;
            else 
                data_port_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_port_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_port_ARVALID_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state6, grp_reset_mem_fu_413_ap_done, ap_reg_ioackin_data_port_ARREADY)
    begin
        if ((((ap_reg_ioackin_data_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((grp_reset_mem_fu_413_ap_done = ap_const_logic_1) and (ap_reg_ioackin_data_port_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            data_port_ARVALID <= ap_const_logic_1;
        else 
            data_port_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data_port_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, exitcond_reg_1423, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond1_reg_1280, ap_block_pp0_stage1_11001, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond1_reg_1280 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1423 = ap_const_lv1_0)))) then 
            data_port_RREADY <= ap_const_logic_1;
        else 
            data_port_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_port_blk_n_AR_assign_proc : process(m_axi_data_port_ARREADY, ap_CS_fsm_state22, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            data_port_blk_n_AR <= m_axi_data_port_ARREADY;
        else 
            data_port_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_port_blk_n_R_assign_proc : process(m_axi_data_port_RVALID, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, exitcond_reg_1423, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond1_reg_1280)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond1_reg_1280 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1423 = ap_const_lv1_0)))) then 
            data_port_blk_n_R <= m_axi_data_port_RVALID;
        else 
            data_port_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    dram_idx_V_assign_2_fu_1139_p2 <= std_logic_vector(unsigned(tmp_s_reg_1374) + unsigned(dram_idx_assign_reg_381));
    dram_idx_V_assign_3_fu_882_p2 <= std_logic_vector(unsigned(tmp_14_reg_1241) + unsigned(dram_idx_assign_1_reg_339));
    exitcond1_fu_686_p2 <= "1" when (ap_phi_mux_indvar2_phi_fu_364_p4 = tmp_110_add_i32_shr_reg_1246) else "0";
    exitcond_fu_955_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_406_p4 = tmp_96_add_i32_shr_reg_1379) else "0";
    exitcond_i1_fu_635_p2 <= "1" when (y_0_i1_reg_349 = reg_471) else "0";
    exitcond_i_fu_905_p2 <= "1" when (y_0_i_reg_391 = reg_471) else "0";

    g2l_dep_queue_V_0_ack_out_assign_proc : process(g2l_dep_queue_V_0_vld_out, ap_CS_fsm_state3, tmp_11_reg_1186)
    begin
        if ((not(((g2l_dep_queue_V_0_vld_out = ap_const_logic_0) and (tmp_11_reg_1186 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_11_reg_1186 = ap_const_lv1_1))) then 
            g2l_dep_queue_V_0_ack_out <= ap_const_logic_1;
        else 
            g2l_dep_queue_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    g2l_dep_queue_V_0_vld_in <= g2l_dep_queue_V_TVALID;
    g2l_dep_queue_V_0_vld_out <= g2l_dep_queue_V_0_state(0);

    g2l_dep_queue_V_TDATA_blk_n_assign_proc : process(g2l_dep_queue_V_0_state, ap_CS_fsm_state3, tmp_11_reg_1186)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_11_reg_1186 = ap_const_lv1_1))) then 
            g2l_dep_queue_V_TDATA_blk_n <= g2l_dep_queue_V_0_state(0);
        else 
            g2l_dep_queue_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    g2l_dep_queue_V_TREADY <= g2l_dep_queue_V_0_state(1);
    grp_fu_450_p4 <= tmp_V_reg_1171(111 downto 96);
    grp_reset_mem_fu_413_ap_start <= grp_reset_mem_fu_413_ap_start_reg;

    grp_reset_mem_fu_413_range_V_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state20, this_assign_4_reg_1218, y_offset_0_V_reg_1223, y_offset_1_V_reg_1228, tmp_7_reg_1233, this_assign_3_reg_1369, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_reset_mem_fu_413_range_V <= this_assign_4_reg_1218;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_7_reg_1233 = ap_const_lv1_1))) then 
            grp_reset_mem_fu_413_range_V <= y_offset_1_V_reg_1228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_reset_mem_fu_413_range_V <= this_assign_3_reg_1369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_reset_mem_fu_413_range_V <= y_offset_0_V_reg_1223;
        else 
            grp_reset_mem_fu_413_range_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_reset_mem_fu_413_sram_idx_V_read_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state35, reg_459, ap_CS_fsm_state20, tmp_7_reg_1233, sram_idx_V_assign_4_reg_1464, ap_CS_fsm_state34, sram_idx_V_assign2_reg_371)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_reset_mem_fu_413_sram_idx_V_read <= sram_idx_V_assign_4_reg_1464;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_7_reg_1233 = ap_const_lv1_1)))) then 
            grp_reset_mem_fu_413_sram_idx_V_read <= sram_idx_V_assign2_reg_371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_reset_mem_fu_413_sram_idx_V_read <= reg_459;
        else 
            grp_reset_mem_fu_413_sram_idx_V_read <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    indvar_next1_fu_691_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar2_phi_fu_364_p4) + unsigned(ap_const_lv21_1));
    indvar_next_fu_960_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_406_p4) + unsigned(ap_const_lv17_1));

    inp_mem_V_Addr_A_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state20, tmp_7_reg_1233, ap_CS_fsm_state34, grp_reset_mem_fu_413_mem_V_Addr_A, inp_mem_V_Addr_A_orig)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_7_reg_1233 = ap_const_lv1_1)))) then 
            inp_mem_V_Addr_A <= grp_reset_mem_fu_413_mem_V_Addr_A;
        else 
            inp_mem_V_Addr_A <= std_logic_vector(shift_left(unsigned(inp_mem_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
        end if; 
    end process;


    inp_mem_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage0, inp_mem_V_addr_reg_1432, inp_mem_V_addr_reg_1432_pp1_iter1_reg, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((ap_enable_reg_pp1_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                inp_mem_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inp_mem_V_addr_reg_1432_pp1_iter1_reg),32));
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                inp_mem_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inp_mem_V_addr_reg_1432),32));
            else 
                inp_mem_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inp_mem_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inp_mem_V_Clk_A <= ap_clk;

    inp_mem_V_Din_A_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, ap_CS_fsm_state35, ap_CS_fsm_state20, tmp_7_reg_1233, ap_CS_fsm_state34, ap_enable_reg_pp1_iter1, grp_reset_mem_fu_413_mem_V_Din_A, tmp_52_fu_1127_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            inp_mem_V_Din_A <= tmp_52_fu_1127_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_7_reg_1233 = ap_const_lv1_1)))) then 
            inp_mem_V_Din_A <= grp_reset_mem_fu_413_mem_V_Din_A;
        else 
            inp_mem_V_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inp_mem_V_EN_A_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state35, ap_CS_fsm_state20, tmp_7_reg_1233, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, ap_CS_fsm_state34, ap_enable_reg_pp1_iter1, grp_reset_mem_fu_413_mem_V_EN_A)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            inp_mem_V_EN_A <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_7_reg_1233 = ap_const_lv1_1)))) then 
            inp_mem_V_EN_A <= grp_reset_mem_fu_413_mem_V_EN_A;
        else 
            inp_mem_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inp_mem_V_Rst_A <= ap_rst_n_inv;

    inp_mem_V_WEN_A_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state35, ap_CS_fsm_state20, tmp_7_reg_1233, exitcond_reg_1423_pp1_iter1_reg, ap_block_pp1_stage1_11001, ap_CS_fsm_state34, ap_enable_reg_pp1_iter1, grp_reset_mem_fu_413_mem_V_WEN_A)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_reg_1423_pp1_iter1_reg = ap_const_lv1_0))) then 
            inp_mem_V_WEN_A <= ap_const_lv16_FFFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_7_reg_1233 = ap_const_lv1_1)))) then 
            inp_mem_V_WEN_A <= grp_reset_mem_fu_413_mem_V_WEN_A;
        else 
            inp_mem_V_WEN_A <= ap_const_lv16_0;
        end if; 
    end process;

    inputs_V2_sum_cast_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputs_V2_sum_reg_1397),64));
    inputs_V2_sum_fu_929_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_1166) + unsigned(r_V_cast_cast_fu_925_p1));
    l2g_dep_queue_V_1_ack_in <= l2g_dep_queue_V_1_state(1);
    l2g_dep_queue_V_1_ack_out <= l2g_dep_queue_V_TREADY;
    l2g_dep_queue_V_1_data_out <= ap_const_lv8_1;
    l2g_dep_queue_V_1_sel <= l2g_dep_queue_V_1_sel_rd;

    l2g_dep_queue_V_1_vld_in_assign_proc : process(ap_CS_fsm_state35, tmp_53_fu_1144_p3, ap_block_state35_io, ap_block_state35_on_subcall_done)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state35_on_subcall_done) or (ap_const_boolean_1 = ap_block_state35_io))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_53_fu_1144_p3 = ap_const_lv1_1))) then 
            l2g_dep_queue_V_1_vld_in <= ap_const_logic_1;
        else 
            l2g_dep_queue_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    l2g_dep_queue_V_1_vld_out <= l2g_dep_queue_V_1_state(0);
    l2g_dep_queue_V_TDATA <= l2g_dep_queue_V_1_data_out;

    l2g_dep_queue_V_TDATA_blk_n_assign_proc : process(l2g_dep_queue_V_1_state, ap_CS_fsm_state35, tmp_53_fu_1144_p3, ap_CS_fsm_state36, tmp_53_reg_1479)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_53_reg_1479 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_53_fu_1144_p3 = ap_const_lv1_1)))) then 
            l2g_dep_queue_V_TDATA_blk_n <= l2g_dep_queue_V_1_state(1);
        else 
            l2g_dep_queue_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    l2g_dep_queue_V_TVALID <= l2g_dep_queue_V_1_state(0);
    load_queue_V_V_0_ack_in <= load_queue_V_V_0_state(1);

    load_queue_V_V_0_ack_out_assign_proc : process(load_queue_V_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (load_queue_V_V_0_vld_out = ap_const_logic_1))) then 
            load_queue_V_V_0_ack_out <= ap_const_logic_1;
        else 
            load_queue_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    load_queue_V_V_0_data_out_assign_proc : process(load_queue_V_V_0_payload_A, load_queue_V_V_0_payload_B, load_queue_V_V_0_sel)
    begin
        if ((load_queue_V_V_0_sel = ap_const_logic_1)) then 
            load_queue_V_V_0_data_out <= load_queue_V_V_0_payload_B;
        else 
            load_queue_V_V_0_data_out <= load_queue_V_V_0_payload_A;
        end if; 
    end process;

    load_queue_V_V_0_load_A <= (load_queue_V_V_0_state_cmp_full and not(load_queue_V_V_0_sel_wr));
    load_queue_V_V_0_load_B <= (load_queue_V_V_0_state_cmp_full and load_queue_V_V_0_sel_wr);
    load_queue_V_V_0_sel <= load_queue_V_V_0_sel_rd;
    load_queue_V_V_0_state_cmp_full <= '0' when (load_queue_V_V_0_state = ap_const_lv2_1) else '1';
    load_queue_V_V_0_vld_in <= load_queue_V_V_TVALID;
    load_queue_V_V_0_vld_out <= load_queue_V_V_0_state(0);

    load_queue_V_V_TDATA_blk_n_assign_proc : process(load_queue_V_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            load_queue_V_V_TDATA_blk_n <= load_queue_V_V_0_state(0);
        else 
            load_queue_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    load_queue_V_V_TREADY <= load_queue_V_V_0_state(1);
    p_demorgan9_fu_1090_p2 <= (tmp_48_fu_1084_p2 and tmp_47_fu_1078_p2);
    p_demorgan_fu_821_p2 <= (tmp_72_fu_815_p2 and tmp_71_fu_809_p2);
    p_phi_fu_852_p3 <= 
        wgt_mem_1_V_Dout_A when (tmp_55_reg_1289_pp0_iter1_reg(0) = '1') else 
        wgt_mem_0_V_Dout_A;
    r_V_1_cast_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_647_p3),38));
    r_V_1_fu_647_p3 <= (dram_idx_assign_1_reg_339 & ap_const_lv5_0);
    r_V_cast_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_917_p3),34));
    r_V_fu_917_p3 <= (dram_idx_assign_reg_381 & ap_const_lv1_0);
    sram_idx_V_assign_4_fu_1134_p2 <= std_logic_vector(unsigned(sram_idx_V_assign_3_reg_1402) + unsigned(tmp_3_reg_1199));
    sram_idx_V_assign_6_fu_877_p2 <= std_logic_vector(unsigned(tmp_3_reg_1199) + unsigned(sram_idx_V_assign_s_reg_329));
    this_assign_3_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_cast_reg_1194),16));
    this_assign_4_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_536_p1),5));
    this_assign_4_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1207),16));
    tmp22_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_544_p2),16));
    tmp2_fu_544_p2 <= std_logic_vector(unsigned(this_assign_4_cast_fu_540_p1) + unsigned(tmp_66_cast_fu_518_p1));
    tmp_10_fu_614_p2 <= "1" when (tmp_6_fu_599_p4 = ap_const_lv2_1) else "0";
    tmp_110_add_i32_shr_fu_624_p3 <= (tmp_3_reg_1199 & ap_const_lv5_0);
    tmp_110_add_i32_shr_s_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_add_i32_shr_fu_624_p3),32));
    tmp_116_cast_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_975_p4),64));
    tmp_128_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_reg_1294_pp0_iter1_reg),64));
    tmp_14_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_450_p4),32));
    tmp_16_fu_944_p1 <= grp_reset_mem_fu_413_ap_return(13 - 1 downto 0);
    tmp_17_fu_948_p3 <= (tmp_16_reg_1413 & ap_const_lv1_0);
    tmp_18_fu_674_p1 <= sram_idx_V_assign_s_reg_329(12 - 1 downto 0);
    tmp_19_fu_678_p3 <= (tmp_18_fu_674_p1 & ap_const_lv5_0);
    tmp_1_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1156),34));
    tmp_20_fu_966_p1 <= ap_phi_mux_indvar_phi_fu_406_p4(14 - 1 downto 0);
    tmp_21_fu_970_p2 <= std_logic_vector(unsigned(tmp_17_reg_1418) + unsigned(tmp_20_fu_966_p1));
    tmp_22_fu_975_p4 <= tmp_21_fu_970_p2(13 downto 1);
    tmp_23_fu_990_p1 <= ap_phi_mux_indvar_phi_fu_406_p4(1 - 1 downto 0);
    tmp_24_fu_994_p3 <= (tmp_23_reg_1437 & ap_const_lv6_0);
    tmp_25_fu_1001_p2 <= (tmp_24_fu_994_p3 or ap_const_lv7_3F);
    tmp_26_fu_1007_p2 <= "1" when (unsigned(tmp_24_fu_994_p3) > unsigned(tmp_25_fu_1001_p2)) else "0";
    tmp_27_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_994_p3),8));
    tmp_28_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_1001_p2),8));
    tmp_2_fu_509_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_reg_1171),to_integer(unsigned('0' & ap_const_lv128_lc_4(31-1 downto 0)))));
    tmp_30_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_port_addr_read_reg_1442),128));
    tmp_31_fu_705_p2 <= std_logic_vector(unsigned(tmp_54_fu_697_p1) + unsigned(tmp_19_reg_1275));
    tmp_34_fu_730_p3 <= (tmp_33_reg_1299 & ap_const_lv6_0);
    tmp_35_fu_737_p2 <= (tmp_34_fu_730_p3 or ap_const_lv10_3F);
    tmp_36_fu_1024_p2 <= (tmp_27_fu_1013_p1 xor ap_const_lv8_7F);
    tmp_37_fu_1030_p3 <= 
        tmp_27_fu_1013_p1 when (tmp_26_fu_1007_p2(0) = '1') else 
        tmp_28_fu_1017_p1;
    tmp_38_fu_1038_p3 <= 
        tmp_28_fu_1017_p1 when (tmp_26_fu_1007_p2(0) = '1') else 
        tmp_27_fu_1013_p1;
    tmp_39_fu_1046_p3 <= 
        tmp_36_fu_1024_p2 when (tmp_26_fu_1007_p2(0) = '1') else 
        tmp_27_fu_1013_p1;
    tmp_3_fu_522_p4 <= tmp_V_reg_1171(95 downto 80);
    tmp_40_fu_1054_p2 <= (tmp_37_fu_1030_p3 xor ap_const_lv8_7F);
    tmp_41_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1046_p3),128));
    tmp_42_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_1038_p3),128));
    tmp_43_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1054_p2),128));
    tmp_44_fu_1072_p2 <= std_logic_vector(shift_left(unsigned(tmp_30_fu_1021_p1),to_integer(unsigned('0' & tmp_41_fu_1060_p1(31-1 downto 0)))));
    
    tmp_45_fu_1096_p4_proc : process(tmp_44_reg_1452)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_45_fu_1096_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_44_reg_1452;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_45_fu_1096_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_45_fu_1096_p4_i) := tmp_44_reg_1452(128-1-tmp_45_fu_1096_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_45_fu_1096_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_46_fu_1105_p3 <= 
        tmp_45_fu_1096_p4 when (tmp_26_reg_1447(0) = '1') else 
        tmp_44_reg_1452;
    tmp_47_fu_1078_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_42_fu_1064_p1(31-1 downto 0)))));
    tmp_48_fu_1084_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_43_fu_1068_p1(31-1 downto 0)))));
    tmp_49_fu_1111_p2 <= (p_demorgan9_reg_1458 xor ap_const_lv128_lc_3);
    tmp_4_fu_531_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_reg_1171),to_integer(unsigned('0' & ap_const_lv128_lc_5(31-1 downto 0)))));
    tmp_50_fu_1116_p2 <= (tmp_49_fu_1111_p2 and inp_mem_V_Dout_A);
    tmp_51_fu_1122_p2 <= (tmp_46_fu_1105_p3 and p_demorgan9_reg_1458);
    tmp_52_fu_1127_p2 <= (tmp_51_fu_1122_p2 or tmp_50_fu_1116_p2);
    tmp_53_fu_1144_p3 <= tmp_V_reg_1171(6 downto 6);
    tmp_54_fu_697_p1 <= ap_phi_mux_indvar2_phi_fu_364_p4(17 - 1 downto 0);
    tmp_55_fu_701_p1 <= ap_phi_mux_indvar2_phi_fu_364_p4(1 - 1 downto 0);
    tmp_56_fu_743_p2 <= "1" when (unsigned(tmp_34_fu_730_p3) > unsigned(tmp_35_fu_737_p2)) else "0";
    tmp_57_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_reg_1309),11));
    tmp_58_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_reg_1314),11));
    tmp_59_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_port_addr_1_rea_reg_1304),1024));
    tmp_5_fu_536_p1 <= tmp_4_fu_531_p2(4 - 1 downto 0);
    tmp_60_fu_758_p2 <= (tmp_57_fu_749_p1 xor ap_const_lv11_3FF);
    tmp_61_fu_764_p3 <= 
        tmp_57_fu_749_p1 when (tmp_56_reg_1319(0) = '1') else 
        tmp_58_fu_752_p1;
    tmp_62_fu_771_p3 <= 
        tmp_58_fu_752_p1 when (tmp_56_reg_1319(0) = '1') else 
        tmp_57_fu_749_p1;
    tmp_63_fu_778_p3 <= 
        tmp_60_fu_758_p2 when (tmp_56_reg_1319(0) = '1') else 
        tmp_57_fu_749_p1;
    tmp_64_fu_785_p2 <= (tmp_61_fu_764_p3 xor ap_const_lv11_3FF);
    tmp_65_cast_fu_514_p1 <= tmp_2_fu_509_p2(4 - 1 downto 0);
    tmp_65_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_778_p3),1024));
    tmp_66_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_cast_fu_514_p1),5));
    tmp_66_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_771_p3),1024));
    tmp_67_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_785_p2),1024));
    tmp_68_fu_803_p2 <= std_logic_vector(shift_left(unsigned(tmp_59_fu_755_p1),to_integer(unsigned('0' & tmp_65_fu_791_p1(31-1 downto 0)))));
    
    tmp_69_fu_832_p4_proc : process(tmp_68_reg_1327)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_69_fu_832_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := tmp_68_reg_1327;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_69_fu_832_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_69_fu_832_p4_i) := tmp_68_reg_1327(1024-1-tmp_69_fu_832_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_69_fu_832_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_6_fu_599_p4 <= tmp_V_reg_1171(8 downto 7);
    tmp_70_fu_841_p3 <= 
        tmp_69_fu_832_p4 when (tmp_56_reg_1319(0) = '1') else 
        tmp_68_reg_1327;
    tmp_71_fu_809_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_6),to_integer(unsigned('0' & tmp_66_fu_795_p1(31-1 downto 0)))));
    tmp_72_fu_815_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_6),to_integer(unsigned('0' & tmp_67_fu_799_p1(31-1 downto 0)))));
    tmp_73_fu_859_p2 <= (p_demorgan_reg_1333 xor ap_const_lv1024_lc_6);
    tmp_74_cast_fu_563_p4 <= tmp_V_reg_1171(115 downto 112);
    tmp_74_fu_864_p2 <= (tmp_73_fu_859_p2 and p_phi_fu_852_p3);
    tmp_75_fu_847_p2 <= (tmp_70_fu_841_p3 and p_demorgan_reg_1333);
    tmp_76_fu_870_p2 <= (tmp_75_reg_1349 or tmp_74_fu_864_p2);
    tmp_78_cast_fu_581_p4 <= tmp_V_reg_1171(119 downto 116);
    tmp_7_fu_608_p2 <= "1" when (tmp_6_fu_599_p4 = ap_const_lv2_2) else "0";
    tmp_96_add_i32_shr_c_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_add_i32_shr_fu_894_p3),32));
    tmp_96_add_i32_shr_fu_894_p3 <= (tmp_3_reg_1199 & ap_const_lv1_0);
    tmp_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1151),38));
    tmp_s_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_450_p4),32));
    weights_V4_sum_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_V4_sum_reg_1264),64));
    weights_V4_sum_fu_659_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1161) + unsigned(r_V_1_cast_cast_fu_655_p1));
    wgt_mem_0_V_Addr_A <= std_logic_vector(shift_left(unsigned(wgt_mem_0_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));

    wgt_mem_0_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, wgt_mem_0_V_addr_reg_1339, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_128_cast_fu_827_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wgt_mem_0_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wgt_mem_0_V_addr_reg_1339),32));
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wgt_mem_0_V_Addr_A_orig <= tmp_128_cast_fu_827_p1(32 - 1 downto 0);
        else 
            wgt_mem_0_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    wgt_mem_0_V_Clk_A <= ap_clk;
    wgt_mem_0_V_Din_A <= tmp_76_fu_870_p2;

    wgt_mem_0_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            wgt_mem_0_V_EN_A <= ap_const_logic_1;
        else 
            wgt_mem_0_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    wgt_mem_0_V_Rst_A <= ap_rst_n_inv;

    wgt_mem_0_V_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_55_reg_1289_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_55_reg_1289_pp0_iter1_reg = ap_const_lv1_0))) then 
            wgt_mem_0_V_WEN_A <= ap_const_lv128_lc_3;
        else 
            wgt_mem_0_V_WEN_A <= ap_const_lv128_lc_1;
        end if; 
    end process;

    wgt_mem_1_V_Addr_A <= std_logic_vector(shift_left(unsigned(wgt_mem_1_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));

    wgt_mem_1_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, wgt_mem_1_V_addr_reg_1344, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_128_cast_fu_827_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wgt_mem_1_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wgt_mem_1_V_addr_reg_1344),32));
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            wgt_mem_1_V_Addr_A_orig <= tmp_128_cast_fu_827_p1(32 - 1 downto 0);
        else 
            wgt_mem_1_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    wgt_mem_1_V_Clk_A <= ap_clk;
    wgt_mem_1_V_Din_A <= tmp_76_fu_870_p2;

    wgt_mem_1_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            wgt_mem_1_V_EN_A <= ap_const_logic_1;
        else 
            wgt_mem_1_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    wgt_mem_1_V_Rst_A <= ap_rst_n_inv;

    wgt_mem_1_V_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_55_reg_1289_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_55_reg_1289_pp0_iter1_reg = ap_const_lv1_1))) then 
            wgt_mem_1_V_WEN_A <= ap_const_lv128_lc_3;
        else 
            wgt_mem_1_V_WEN_A <= ap_const_lv128_lc_1;
        end if; 
    end process;

    x_width_V_fu_554_p2 <= std_logic_vector(unsigned(tmp_3_fu_522_p4) + unsigned(tmp22_cast_fu_550_p1));
    y_1_fu_641_p2 <= std_logic_vector(unsigned(y_0_i1_reg_349) + unsigned(ap_const_lv16_1));
    y_fu_911_p2 <= std_logic_vector(unsigned(y_0_i_reg_391) + unsigned(ap_const_lv16_1));
    y_offset_0_V_fu_576_p1 <= y_offset_0_V_fu_576_p10(4 - 1 downto 0);
    y_offset_0_V_fu_576_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_cast_fu_563_p4),16));
    y_offset_1_V_fu_594_p1 <= y_offset_1_V_fu_594_p10(4 - 1 downto 0);
    y_offset_1_V_fu_594_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_cast_fu_581_p4),16));
end behav;
